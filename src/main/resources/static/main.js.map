{"version":3,"sources":["./src/app/shared/services/response-handler/authentication-response-handler.ts","./src/app/meal-planner/recipes/recipe-start/recipe-start.component.ts","./src/app/meal-planner/recipes/recipe-start/recipe-start.component.html","./src/app/meal-planner/recipes/store/reducers/recipes.reducer.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/order-info/order-info.component.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/order-info/order-info.component.html","./src/app/shared/services/response-handler/order-response-handler.ts","./src/app/meal-planner/meal-optimizer/online-order/online-order.component.ts","./src/app/meal-planner/meal-optimizer/online-order/online-order.component.html","./src/app/meal-planner/meal-optimizer/store/actions/user-preferences.actions.ts","./src/app/meal-planner/meal-optimizer/meal-selector/meal-selector.component.ts","./src/app/meal-planner/meal-optimizer/meal-selector/meal-selector.component.html","./src/app/meal-planner/shopping-list/shopping-list.component.ts","./src/app/meal-planner/shopping-list/shopping-list.component.html","./src/app/shared/app.init.ts","./src/app/store/reducers/app.reducer.ts","./src/app/shared/services/interceptor/connection-status-interceptor.service.ts","./src/app/meal-planner/shopping-list/shopping-edit/shopping-edit.component.ts","./src/app/meal-planner/shopping-list/shopping-edit/shopping-edit.component.html","./src/app/shared/core/core.module.ts","./src/app/meal-planner/meal-optimizer/store/actions/menu.actions.ts","./src/app/shared/services/display.service.ts","./src/app/app-info/home/home.component.ts","./src/app/app-info/home/home.component.html","./src/app/shared/services/auth-guard.service.ts","./src/environments/environment.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-quality/optimized-result-quality.component.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-quality/optimized-result-quality.component.html","./src/app/shared/model/user-builder.model.ts","./src/app/shared/core/error-page/error-page.component.ts","./src/app/shared/core/error-page/error-page.component.html","./src/app/meal-planner/shopping-list/store/shopping-list.reducer.ts","./src/app/shared/services/error-handler/connection-loss-error-handler.ts","./src/app/meal-planner/meal-optimizer/store/reducers/order.reducer.ts","./src/app/meal-planner/recipes/store/effects/recipes.effects.ts","./src/app/shared/optimization-mode.enum.ts","./src/app/meal-planner/meal-optimizer/meal-optimizer.component.ts","./src/app/meal-planner/meal-optimizer/meal-optimizer.component.html","./src/app/shared/services/user-diet-type-resolver.service.ts","./src/app/shared/core/custom-notification/custom-notification.component.ts","./src/app/shared/core/custom-notification/custom-notification.component.html","./src/app/meal-planner/meal-optimizer/store/reducers/user-preferences.reducer.ts","./src/app/shared/services/order.service.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-cost/optimized-result-cost.component.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-cost/optimized-result-cost.component.html","./src/app/app-info/app-info.module.ts","./src/app/shared/services/connection-status-handler.service.ts","./src/app/shared/services/interceptor/error-interceptor.service.ts","./src/app/shared/optimization-mapping.enum.ts","./src/app/user-mgmt/store/actions/user-mgmt.actions.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/meal-planner/meal-optimizer/store/actions/order.actions.ts","./src/app/meal-planner/meal-optimizer/store/effects/menu.effects.ts","./src/app/meal-planner/recipes/recipe-detail/recipe-detail.component.ts","./src/app/meal-planner/recipes/recipe-detail/recipe-detail.component.html","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-meal-plan.component.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-meal-plan.component.html","./src/app/shared/services/indexeddb/indexed-db.service.ts","./src/app/app.module.ts","./src/app/user-mgmt/user-mgmt-routing.module.ts","./src/app/meal-planner/meal-optimizer/store/reducers/menu.reducer.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-results-table.component.ts","./src/app/meal-planner/meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-results-table.component.html","./src/app/user-mgmt/user-mgmt.module.ts","./src/app/meal-planner/shopping-list/store/shopping-list.actions.ts","./src/app/app-info/contact-us/contact-us.component.ts","./src/app/app-info/contact-us/contact-us.component.html","./src/app/user-mgmt/store/actions/user-display-preferences.actions.ts","./src/app/shared/services/action-dispatcher.service.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/user-mgmt/store/reducers/user-display-preferences.reducer.ts","./src/app/shared/services/optimization.service.ts","./src/app/shared/services/error-handler/app-error-handler.ts","./src/app/shared/services/response-handler/recipe-response-handler.ts","./src/app/shared/model/shopping-item-model.ts","./src/app/meal-planner/meal-optimizer/store/effects/user-preferences.effects.ts","./src/app/shared/model/user.model.ts","./src/app/shared/core/custom-overlay/custom-overlay.component.ts","./src/app/shared/core/custom-overlay/custom-overlay.component.html","./src/app/user-mgmt/store/reducers/user-mgmt.reducer.ts","./src/app/meal-planner/meal-planner.routing.module.ts","./src/app/meal-planner/meal-optimizer/store/effects/order.effects.ts","./src/app/shared/services/user.service.ts","./src/app/meal-planner/recipes/recipes.component.ts","./src/app/meal-planner/recipes/recipes.component.html","./src/app/shared/services/response-handler/menu-response-handler.ts","./src/app/shared/model/nutrient.model.ts","./src/app/meal-planner/recipes/store/actions/recipes.actions.ts","./src/app/meal-planner/meal-planner.component.ts","./src/app/meal-planner/meal-planner.component.html","./src/app/shared/services/interceptor/auth-interceptor.service.ts","./src/app/shared/services/error-handler/error-handler.ts","./src/app/meal-planner/meal-optimizer/meal-selector/meal-options/meal-options.component.ts","./src/app/meal-planner/meal-optimizer/meal-selector/meal-options/meal-options.component.html","./src/app/meal-planner/recipes/recipe-list/recipe-item/recipe-item.component.ts","./src/app/meal-planner/recipes/recipe-list/recipe-item/recipe-item.component.html","./src/app/shared/default-messages.ts","./src/app/shared/services/http/user-diet.service.ts","./src/app/shared/services/interceptor/interceptors.ts","./src/app/meal-planner/meal-planner.module.ts","./src/app/shared/services/notification-display.service.ts","./src/app/app-info/app-info.component.ts","./src/app/user-mgmt/user-redirect/user-redirect.component.ts","./src/app/user-mgmt/user-redirect/user-redirect.component.html","./src/app/meal-planner/meal-optimizer/delivery-date-selector/delivery-date-selector.component.ts","./src/app/meal-planner/meal-optimizer/delivery-date-selector/delivery-date-selector.component.html","./src/app/meal-planner/meal-optimizer/meal-selector/manage-meal-plan/manage-meal-plan.component.ts","./src/app/meal-planner/meal-optimizer/meal-selector/manage-meal-plan/manage-meal-plan.component.html","./src/app/shared/services/recipe.service.ts","./src/app/app-info/app-info-routing.module.ts","./src/app/shared/services/can-exit-page.service.ts","./src/app/app-routing.module.ts","./src/app/shared/shopping-list-mode.enum.ts","./src/app/meal-planner/meal-optimizer/user_diet_type/user_diet_type.component.ts","./src/app/meal-planner/meal-optimizer/user_diet_type/user_diet_type.component.html","./src/app/shared/services/overlay-display.service.ts","./src/app/meal-planner/recipes/recipe-list/recipe-list.component.ts","./src/app/meal-planner/recipes/recipe-list/recipe-list.component.html","./src/main.ts","./src/app/shared/http-request-status.enum.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\n\r\nimport { BaseResponseHandler } from \"./base-response-handler\";\r\nimport * as UserMgmtActions from '../../../user-mgmt/store/actions/user-mgmt.actions';\r\nimport { User } from '../../../shared/model/user.model';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class AuthenticationResponseHandler implements BaseResponseHandler{\r\n\r\n    constructor(private store : Store<AppState>) {}\r\n\r\n    handleSuccess(authenticatedUser : User) { \r\n        this.store.dispatch(new UserMgmtActions.LoginSuccess(authenticatedUser));\r\n    }\r\n    handleFailure(errorResponse: String) {\r\n            this.store.dispatch(new UserMgmtActions.LoginError(errorResponse));\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { RecipeService } from 'src/app/shared/services/recipe.service';\r\n\r\n@Component({\r\n  selector: 'app-recipe-start',\r\n  templateUrl: './recipe-start.component.html',\r\n  styleUrls: ['./recipe-start.component.css']\r\n})\r\nexport class RecipeStartComponent implements OnInit {\r\n  \r\n  constructor(private recipeService : RecipeService) { }\r\n\r\n  ngOnInit(): void {}\r\n}","<h4>Select a recipe to view details here</h4>","import { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { Recipe } from '../../../../shared/model/recipe.model';\r\nimport * as RecipesActions from '../actions/recipes.actions';\r\n\r\nexport interface Recipes {\r\n    recipes : Recipe[],\r\n    error : String,\r\n    requestStatus : HttpRequestStatus\r\n}\r\n\r\nconst defaultRecipes : Recipes = {\r\n    recipes : null,\r\n    error : null,\r\n    requestStatus : HttpRequestStatus.NO_ACTION\r\n};\r\n\r\nexport function recipesReducer(state : Recipes = defaultRecipes, action : RecipesActions.RecipesActions) {\r\n    switch(action.type) {\r\n        \r\n        case RecipesActions.FETCH_RECIPES_SUCCESS :\r\n            return { ...state, recipes : action.payload, error : null, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED};\r\n\r\n        case RecipesActions.FETCH_RECIPES_FAIL :\r\n            return { ...state, recipes : null, error : action.payload, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED};\r\n\r\n        case RecipesActions.UPDATE_REQUEST_STATUS:\r\n            return { ...state, requestStatus : action.payload };\r\n              \r\n        case RecipesActions.CLEAR_RECIPES:\r\n            return defaultRecipes;\r\n                \r\n        default : return state;\r\n    }\r\n}","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { UserPreferences } from 'src/app/meal-planner/meal-optimizer/store/reducers/user-preferences.reducer';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\n\r\n@Component({\r\n  selector: 'app-order-info',\r\n  templateUrl: './order-info.component.html',\r\n  styleUrls: ['./order-info.component.css']\r\n})\r\n/*\r\n * This tab displays the user inputs (diet type / delivery date / meals selected)\r\n */\r\nexport class OrderInfoComponent implements OnInit, OnDestroy {\r\n\r\n  orderInfo : { dietType: String, deliveryDate: Date, mealSelected: Array<String> } = \r\n              { dietType : null, deliveryDate: null, mealSelected: null };\r\n\r\n  constructor(private store : Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.store.select('userPreferences').subscribe((userPrefs : UserPreferences) => {\r\n      this.orderInfo.dietType = userPrefs.dietType;\r\n      this.orderInfo.deliveryDate = userPrefs.deliveryDate;\r\n      this.orderInfo.mealSelected = userPrefs.mealSelected;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() : void { }\r\n}","<div *ngIf=\"orderInfo !== undefined\" class=\"ml-5 mt-2\">\r\n    <h3>You chose</h3>\r\n    <ul class = \"list-unstyled\">\r\n        <li class=\"mt-2 ml-2\">{{ orderInfo.dietType }}</li>\r\n        <li class=\"mt-2 ml-2\">{{ orderInfo.deliveryDate | date: 'fullDate' }}</li>\r\n        <li *ngFor = 'let meal of orderInfo.mealSelected' class=\"mt-2 ml-2\">{{ meal }}</li>\r\n    </ul>\r\n</div>","import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\n\r\nimport { BaseResponseHandler } from \"./base-response-handler\";\r\nimport * as OrderActions from '../../../meal-planner/meal-optimizer/store/actions/order.actions';\r\nimport { OrderResponse } from '../../model/order-response.model';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class OrderResponseHandler implements BaseResponseHandler {\r\n    constructor() {}\r\n\r\n    //action can be create/update    \r\n    handleSuccess(optimizedMealPlans : OrderResponse) {\r\n        return new OrderActions.SaveOrderSuccess(optimizedMealPlans);\r\n    }\r\n    \r\n    handleFailure(errorResponse: any) {\r\n        return of(new OrderActions.SaveOrderFail(errorResponse));\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\n\r\n@Component({\r\n  selector: 'app-online-order',\r\n  templateUrl: './online-order.component.html',\r\n  styleUrls: ['./online-order.component.css']\r\n})\r\n/* This component displays delivery information such as address, first name \r\n * and last name based on the authenticatedUser.\r\n */\r\nexport class OnlineOrderComponent implements OnInit {\r\n\r\n  constructor(private store : Store<AppState>) { }\r\n\r\n  authenticatedUser : AuthenticatedUser;\r\n\r\n  ngOnInit(): void {\r\n    this.store.select('authenticatedUser').subscribe(( authenticatedUser : AuthenticatedUser ) => {\r\n      this.authenticatedUser = authenticatedUser;\r\n    });\r\n  }\r\n}","<h4>Order online</h4>\r\n<form>\r\n    <label for=\"fname\">First name:</label>\r\n    <input type=\"text\" id=\"fname\" \r\n           name=\"fname\" \r\n           [value]=\"authenticatedUser.user.firstName\">\r\n    <br>\r\n    <br>\r\n    <label for=\"lname\">Last name:</label>\r\n    <input type=\"text\" \r\n           id=\"lname\" \r\n           name=\"lname\" \r\n           [value]=\"authenticatedUser.user.lastName\">\r\n    <br>\r\n    <br>\r\n    <label for=\"address\">Address:</label>\r\n    <input type=\"text\" \r\n           id=\"address\" \r\n           name=\"address\" \r\n           [value]=\"authenticatedUser.user.address\">\r\n    <br>\r\n    <br>\r\n    <input type=\"submit\" value=\"Place Order\">\r\n</form>","import { Action } from '@ngrx/store';\r\n\r\nexport const EDIT_DIET_TYPE = '[User preferences] EDIT_DIET_TYPE';\r\nexport const EDIT_DELIVERY_DATE = '[User preferences] EDIT_DELIVERY_DATE';\r\nexport const UPDATE_MEAL = '[User preferences] UPDATE_MEAL';\r\nexport const OPTIMIZATION_TYPE_SELECTED = '[User preferences] OPTIMIZATION_TYPE_SELECTED';\r\nexport const CLEAR_USER_PREFERENCES = '[User preferences] CLEAR_USER_PREFERENCES';\r\n\r\nexport class EditDietType implements Action {\r\n\treadonly type = EDIT_DIET_TYPE;\r\n\tconstructor(public payload : String) {}\r\n}\r\n\r\nexport class EditDeliveryDate implements Action {\r\n\treadonly type = EDIT_DELIVERY_DATE;\r\n\tconstructor(public payload : Date) {}\r\n}\r\n\r\nexport class UpdateMeal implements Action {\r\n\treadonly type = UPDATE_MEAL;\r\n\tconstructor(public payload : {itemPosition: number, itemName: String}) {} //Payload refers to name of item to be added to meal list\r\n}\r\n\r\nexport class OptimizationTypeSelected implements Action {\r\n\treadonly type = OPTIMIZATION_TYPE_SELECTED;\r\n\tconstructor(public payload : String) {}\r\n}\r\n\r\nexport class ClearUserPreferences implements Action {\r\n\treadonly type = CLEAR_USER_PREFERENCES;\r\n}\r\n\r\nexport type UserPreferencesActions = EditDietType | EditDeliveryDate | UpdateMeal | OptimizationTypeSelected | ClearUserPreferences;","import { Component, OnInit, ElementRef, Renderer2 } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { UserPreferences } from '../store/reducers/user-preferences.reducer';\r\n\r\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'app-meal-selector',\r\n  templateUrl: './meal-selector.component.html',\r\n  styleUrls: ['./meal-selector.component.css']\r\n})\r\n\r\n/* This component is a holder for menu received from the backend.\r\n */\r\nexport class MealSelectorComponent implements OnInit {\r\n  \r\n  constructor(private store : Store<AppState>,\r\n              private breakpointObserver: BreakpointObserver,\r\n              private renderer: Renderer2, \r\n              private el: ElementRef) {}\r\n  \r\n  dateOfDelivery : Date;\r\n\r\n  mealsSelected : String[];\r\n\r\n  ngOnInit(): void {\r\n    this.store.select('userPreferences').subscribe((userPrefs : UserPreferences) => {\r\n        \r\n        this.dateOfDelivery = userPrefs.deliveryDate;\r\n\r\n        this.mealsSelected = userPrefs.mealSelected;\r\n      });\r\n\r\n      //Track the size of the window and pivot row -> column accordingly.\r\n      //Note that angular cdk screen sizes(small, medium, large etc.) are different from bootstrap sizes.\r\n      this.breakpointObserver.observe([\r\n        Breakpoints.XSmall,\r\n        Breakpoints.Small,\r\n        Breakpoints.Medium,\r\n        Breakpoints.Large,\r\n        Breakpoints.XLarge\r\n      ]).subscribe( (state: BreakpointState) => {\r\n        if (state.breakpoints[Breakpoints.XSmall]) {\r\n             this.resetSelectorLayout('column');\r\n        }\r\n        if (state.breakpoints[Breakpoints.Small]) {\r\n             this.resetSelectorLayout('column');\r\n        }\r\n        if (state.breakpoints[Breakpoints.Medium]) {\r\n             this.resetSelectorLayout('row');\r\n        }\r\n        if (state.breakpoints[Breakpoints.Large]) {\r\n             this.resetSelectorLayout('row');\r\n        }\r\n        if (state.breakpoints[Breakpoints.XLarge]) {\r\n             this.resetSelectorLayout('row'); \r\n        }\r\n      });  \r\n   }\r\n\r\n   //Function to pivot row -> column using JQuery selector and css classes.\r\n   resetSelectorLayout(layout : String) : void {\r\n \r\n    let tableBody = this.el.nativeElement.querySelector(\"div table tbody\");\r\n    let tableRows = this.el.nativeElement.querySelectorAll(\"div table tbody tr\");\r\n    let tableElements = this.el.nativeElement.querySelectorAll(\"div table tbody td\");\r\n\r\n    switch(layout) {\r\n\r\n       case 'row' : this.renderer.removeClass(tableBody,'flex_container_column');\r\n                    tableRows.forEach((row) => this.renderer.removeClass(row, 'flex_container_row'));\r\n                    tableElements.forEach((element) => this.renderer.removeClass(element, 'w-50'));    \r\n                    this.renderer.addClass(tableBody,'flex_container_row');\r\n                    tableRows.forEach((row) => this.renderer.addClass(row, 'flex_container_column'));  \r\n                    tableElements.forEach((element) => this.renderer.addClass(element, 'w-100'));      \r\n                    break;\r\n      \r\n       case 'column' : this.renderer.removeClass(tableBody,'flex_container_row');\r\n                       tableRows.forEach((row) => this.renderer.removeClass(row, 'flex_container_column'));    \r\n                       tableElements.forEach((element) => this.renderer.removeClass(element, 'w-100'));    \r\n                       this.renderer.addClass(tableBody,'flex_container_column');\r\n                       tableRows.forEach((row) => this.renderer.addClass(row, 'flex_container_row'));\r\n                       tableElements.forEach((element) => this.renderer.addClass(element, 'w-50'));    \r\n                       break;\r\n     }     \r\n   }\r\n}","<h4 class=\"row justify-content-start py-4\">Step 3: Select meals - Choose wisely</h4>\r\n        <table class=\"table table-borderless ml-3\">\r\n          <tbody>\r\n              <tr class=\"col-xs-12 col-1 date-of-delivery m-0 p-0\">\r\n                  <td><h6>Date</h6></td>\r\n                  <td>{{ dateOfDelivery | date }}</td>\r\n              </tr>\r\n              <tr class=\"col-1 custom-col-width m-0 p-0\">\r\n                    <td><h6>Meal 1</h6></td>\r\n                    <td>\r\n                        <app-meal-options [indexOfMeal] = \"0\"></app-meal-options>\r\n                    </td>\r\n              </tr>\r\n              <tr class=\"col-1 custom-col-width m-0 p-0\">\r\n                <td><h6>Meal 2</h6></td>\r\n                <td>\r\n                    <app-meal-options [indexOfMeal] = \"1\"></app-meal-options>\r\n                </td>\r\n              </tr> \r\n              <tr class=\"col-1 custom-col-width m-0 p-0\">\r\n                <td><h6>Meal 3</h6></td>\r\n                <td>\r\n                    <app-meal-options [indexOfMeal] = \"2\"></app-meal-options>\r\n                </td>\r\n              </tr>              \r\n              <tr class=\"col-1 custom-col-width m-0 p-0\">\r\n                <td><h6>Meal 4</h6></td>\r\n                <td>\r\n                    <app-meal-options [indexOfMeal] = \"3\"></app-meal-options>\r\n                </td>\r\n              </tr>               \r\n          </tbody>      \r\n        </table>\r\n        <app-manage-meal-plan class=\"ml-3\"></app-manage-meal-plan>","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { ShoppingItem } from '../../shared/model/shopping-item-model';\r\nimport * as ShoppingListActions from './store/shopping-list.actions';\r\nimport * as fromApp from '../../../app/store/reducers/app.reducer';\r\nimport { ShoppingList } from './store/shopping-list.reducer';\r\nimport { ShoppingListMode } from 'src/app/shared/shopping-list-mode.enum';\r\nimport * as UserDisplayPreferencesActions from '../../user-mgmt/store/actions/user-display-preferences.actions';\r\n\r\n@Component({\r\n  selector: 'app-shopping-list',\r\n  templateUrl: './shopping-list.component.html',\r\n  styleUrls: ['./shopping-list.component.css']\r\n})\r\nexport class ShoppingListComponent implements OnInit, OnDestroy {\r\n  /*\r\n   * Stores a list of shopping items selected from the store. \r\n   */\r\n  shoppingItems: ShoppingItem[];\r\n\r\n  constructor(\r\n    private store: Store<fromApp.AppState>\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.store.select('shoppingList').subscribe((shoppingItems : ShoppingList) => {\r\n      this.shoppingItems = shoppingItems.shoppingItems;\r\n    });\r\n  }\r\n\r\n  onEditItem(index: number) {\r\n    this.store.dispatch(new ShoppingListActions.StartEdit(index));\r\n    this.store.dispatch(new UserDisplayPreferencesActions.UpdateShoppingListMode(ShoppingListMode.UPDATE));\r\n  }\r\n\r\n  ngOnDestroy() { }\r\n}\r\n","<div class=\"row mt-4 ml-1\">\r\n  <div class=\"col-md-11\">\r\n    <h4 class=\"py-4\">Shopping List</h4>\r\n  </div>\r\n</div>    \r\n    <div class=\"row justify-content-start ml-5\">\r\n      <div class=\"col-md-11\">\r\n      <app-shopping-edit class=\"w-100\"></app-shopping-edit>\r\n    </div>\r\n    </div>\r\n    <div class=\"row justify-content-start ml-5\"> \r\n        <ul class=\"list-group col-xl-7 col-lg-7 col-md-8 col-sm-10\">\r\n          <button\r\n            class=\"list-group-item\"\r\n            style=\"cursor: pointer\"\r\n            *ngFor=\"let shoppingItem of shoppingItems; let i = index\"\r\n            (click)=\"onEditItem(i)\"\r\n          >\r\n            {{ shoppingItem.name }} ({{ shoppingItem.amount }}) {{ shoppingItem.measure }}\r\n            <span class=\"badge badge-secondary float-right\" *ngFor=\"let label of shoppingItem.labels\">{{ label }}</span>\r\n        </button>\r\n        </ul>\r\n  </div>","import { KeycloakService } from 'keycloak-angular';\r\n\r\nexport function initializeKeycloak(keycloak: KeycloakService) {\r\n    return () =>\r\n      keycloak.init({\r\n        config: {\r\n          url: 'http://www.myclaypot-iam.xyz/auth',\r\n          //url: 'http://www.myclaypot-iam.xyz:8080/auth',\r\n          realm: 'mealplanner',\r\n          clientId: 'meal-planner-app-client'\r\n        },\r\n        loadUserProfileAtStartUp : true\r\n      });\r\n  }","import { ActionReducerMap } from '@ngrx/store';\r\n\r\nimport * as fromUserPreferences from '../../meal-planner/meal-optimizer/store/reducers/user-preferences.reducer';\r\nimport * as fromMenu from '../../meal-planner/meal-optimizer/store/reducers/menu.reducer';\r\nimport * as fromUserMgmt from '../../user-mgmt/store/reducers/user-mgmt.reducer';\r\nimport * as fromUserDisplayPreferences from '../../user-mgmt/store/reducers/user-display-preferences.reducer';\r\nimport * as fromOptimizedPlans from '../../meal-planner/meal-optimizer/store/reducers/order.reducer';\r\nimport * as fromRecipes from '../../meal-planner/recipes/store/reducers/recipes.reducer';\r\nimport * as fromShoppingList from '../../meal-planner/shopping-list/store/shopping-list.reducer';\r\n\r\nexport interface AppState {\r\n    userPreferences : fromUserPreferences.UserPreferences,\r\n    menu : fromMenu.Menu,\r\n    authenticatedUser : fromUserMgmt.AuthenticatedUser,\r\n    userDisplayPreferences : fromUserDisplayPreferences.UserDisplayPreferences,\r\n    optimizedPlans : fromOptimizedPlans.OptimizedMealPlans,\r\n    recipes : fromRecipes.Recipes,\r\n    shoppingList : fromShoppingList.ShoppingList\r\n}\r\n\r\nexport const appReducer : ActionReducerMap<AppState> = {\r\n    userPreferences : fromUserPreferences.userPreferencesReducer,\r\n    menu : fromMenu.menuReducer,\r\n    authenticatedUser : fromUserMgmt.userMgmtReducer,\r\n    userDisplayPreferences : fromUserDisplayPreferences.userDisplayPreferencesReducer,\r\n    optimizedPlans : fromOptimizedPlans.orderReducer,\r\n    recipes : fromRecipes.recipesReducer,\r\n    shoppingList : fromShoppingList.shoppingListReducer\r\n};","import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ConnectionStatusHandlerService } from '../connection-status-handler.service';\r\nimport { IndexedDBService } from '../indexeddb/indexed-db.service';\r\n\r\n@Injectable()\r\nexport class ConnectionStatusInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private connectionStatusHandlerService : ConnectionStatusHandlerService,\r\n                private indexedDBService : IndexedDBService) {}\r\n\r\n    intercept(request : HttpRequest<any>, next : HttpHandler) : Observable<HttpEvent<any>> {\r\n\r\n        //All of the backend end points match the pattern $(backend url)/mealoptimizer/$(tag), we need not use [].\r\n        //We use [] to accomodate future changes.\r\n        let result = request.url.match(/.*mealoptimizer\\/([a-z]+\\/[a-z]+)/) || [];\r\n        let tag = result[1].replace('/', '-');\r\n\r\n        //If network connection is available, proceed with handling the request\r\n        if(this.connectionStatusHandlerService.getConnectionStatus()) {\r\n            return next.handle(request);\r\n        }\r\n        //If network connection is not available, write to indexedDB\r\n        //Showing notification will be handled inside ConnectionStatusHandler\r\n        else {\r\n            //Write to indexed DB\r\n            this.indexedDBService.addFailedRequest(request, tag);\r\n            return next.handle(request);\r\n        }\r\n    }\r\n}","import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { ShoppingItem } from '../../../shared/model/shopping-item-model';\r\nimport * as ShoppingListActions from '../store/shopping-list.actions';\r\nimport * as fromApp from '../../../store/reducers/app.reducer';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport * as UserDisplayPreferencesActions from '../../../user-mgmt/store/actions/user-display-preferences.actions';\r\nimport { UserDisplayPreferences } from 'src/app/user-mgmt/store/reducers/user-display-preferences.reducer';\r\nimport { ShoppingListMode } from 'src/app/shared/shopping-list-mode.enum';\r\n\r\n@Component({\r\n  selector: 'app-shopping-edit',\r\n  templateUrl: './shopping-edit.component.html',\r\n  styleUrls: ['./shopping-edit.component.css']\r\n})\r\nexport class ShoppingEditComponent implements OnInit, OnDestroy {\r\n\r\n  @ViewChild('f', { static: false }) slForm: NgForm;\r\n  \r\n  subscription: Subscription;\r\n  mode : String = ShoppingListMode.ADD;\r\n  editedItem: ShoppingItem = null;\r\n\r\n  defaultLabel : String = 'Added by user';\r\n\r\n  constructor(private store: Store<fromApp.AppState>) {}\r\n\r\n  ngOnInit() {\r\n\r\n    // Get value of mode (create or update)\r\n    this.store.select('userDisplayPreferences').subscribe((userDisplayPreferences : UserDisplayPreferences) => {\r\n      \r\n      this.mode = userDisplayPreferences.shoppingListMode;\r\n    });\r\n\r\n    this.subscription = this.store\r\n      .select('shoppingList')\r\n      .subscribe(stateData => {\r\n        if (stateData.editedshoppingItemIndex > -1) {\r\n          this.editedItem = stateData.editedshoppingItem;\r\n          this.slForm.setValue({\r\n            name: this.editedItem.name,\r\n            amount: this.editedItem.amount,\r\n            measure: this.editedItem.measure\r\n          });\r\n          this.store.dispatch(new UserDisplayPreferencesActions.UpdateShoppingListMode(ShoppingListMode.UPDATE));\r\n        }\r\n      });\r\n  }\r\n\r\n  onSubmit(form: NgForm) {\r\n    const value = form.value;\r\n    let updatedLabels = null;    \r\n    let newIngredient = null;    \r\n    if (this.mode === 'update') {\r\n      //Calculate updatedLabels. Add the label 'Added by User' if it is not already available \r\n      updatedLabels = this.editedItem.labels.slice();\r\n      if(!updatedLabels.includes(this.defaultLabel)) updatedLabels.push(this.defaultLabel);\r\n      //Create the ingredient to be updated. NOTE: We use the same measure as editedItem since the measure cannot be updated.\r\n      newIngredient = new ShoppingItem(value.name, value.amount, this.editedItem.measure, updatedLabels); \r\n      this.store.dispatch(\r\n        new ShoppingListActions.UpdateIngredient({ shoppingItem : newIngredient, itemNameUpdated : form.controls['name'].touched })\r\n      );\r\n    } else {\r\n      //Create the ingredient to be added\r\n      newIngredient = new ShoppingItem(value.name, value.amount, value.measure, [this.defaultLabel]);\r\n      this.store.dispatch(new ShoppingListActions.AddIngredient(newIngredient));\r\n    }\r\n    this.store.dispatch(new UserDisplayPreferencesActions.UpdateShoppingListMode(ShoppingListMode.ADD));\r\n    this.mode = ShoppingListMode.ADD;\r\n    form.reset();\r\n  }\r\n\r\n  onClear() {\r\n    this.slForm.reset();\r\n    this.store.dispatch(new ShoppingListActions.StopEdit());\r\n    this.store.dispatch(new UserDisplayPreferencesActions.UpdateShoppingListMode(ShoppingListMode.ADD));\r\n  }\r\n\r\n  onDelete() {\r\n    this.store.dispatch(new ShoppingListActions.DeleteIngredient());\r\n    this.onClear();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.store.dispatch(new ShoppingListActions.StopEdit());\r\n  }\r\n}","<form (ngSubmit)=\"onSubmit(f)\" #f=\"ngForm\">\r\n  <div class=\"row justify-content-start\">\r\n    <div class=\"form-group col-md-3 col-sm-4 mx-1\">\r\n      <label for=\"name\">Name</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"name\"\r\n        class=\"form-control\"\r\n        name=\"name\"\r\n        ngModel\r\n        required\r\n      >\r\n    </div>\r\n    <div class=\"form-group col-xl-2 col-lg-2 col-md-3 col-sm-3 mx-1\">\r\n      <label for=\"amount\">Amount</label>\r\n      <input\r\n        type=\"number\"\r\n        id=\"amount\"\r\n        class=\"form-control\"\r\n        name=\"amount\"\r\n        ngModel\r\n        required\r\n        pattern=\"^[1-9]+[0-9]*$\"\r\n        min=\"1\"\r\n      >\r\n    </div>\r\n    <div class=\"form-group col-xl-2 col-lg-2 col-md-2 col-sm-2 mx-1\">\r\n      <label for=\"measure\">Measure</label>\r\n      <input\r\n        type=\"text\"\r\n        id=\"measure\"\r\n        class=\"form-control\"\r\n        name=\"measure\"\r\n        ngModel\r\n        required\r\n        pattern=\"^[a-z()]+$\"\r\n        [disabled]=\"mode === 'update'\"\r\n      >\r\n    </div>\r\n  </div>\r\n  <div class=\"row justify-content-start\">\r\n      <button\r\n        class=\"btn btn-success ml-4 mr-2 mt-2 mb-4\"\r\n        type=\"submit\"\r\n        [disabled]=\"!f.valid\">{{ mode | titlecase }}</button>\r\n      <button\r\n        class=\"btn btn-danger ml-2 mr-2 mt-2 mb-4\"\r\n        type=\"button\"\r\n        (click)=\"onDelete()\"\r\n        *ngIf=\"mode === 'update'\">Delete</button>\r\n      <button class=\"btn btn-primary ml-2 mr-4 mt-2 mb-4\" type=\"button\" (click)=\"onClear()\">Clear</button>\r\n  </div>  \r\n</form>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ErrorPageComponent } from '../core/error-page/error-page.component';\r\nimport { CustomOverlayComponent } from '../core/custom-overlay/custom-overlay.component';\r\nimport { CustomNotificationComponent } from '../core/custom-notification/custom-notification.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ErrorPageComponent,\r\n    CustomOverlayComponent,\r\n    CustomNotificationComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [\r\n    ErrorPageComponent,\r\n    CustomOverlayComponent,\r\n    CustomNotificationComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    CommonModule\r\n  ]\r\n})\r\nexport class CoreModule { }","import { Action } from '@ngrx/store';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\n\r\nexport const UPDATE_MENU_START = '[Menu] Update menu start';\r\nexport const UPDATE_MENU_SUCCESS = '[Menu] Update menu success';\r\nexport const UPDATE_MENU_FAIL = '[Menu] Update menu fail';\r\nexport const CLEAR_MENU = '[Menu] Clear Menu';\r\nexport const UPDATE_REQUEST_STATUS = '[Menu] Update request status';\r\n\r\nexport class UpdateMenuStart implements Action {\r\n    readonly type = UPDATE_MENU_START;\r\n    constructor(public payload : String) {} // Payload refers to dietType\r\n}\r\n\r\nexport class UpdateMenuSuccess implements Action {\r\n    readonly type = UPDATE_MENU_SUCCESS;\r\n    constructor(public payload : Array<String>) {} // Payload refers to a list of itemNames in the menu\r\n}\r\n\r\nexport class UpdateMenuFail implements Action {\r\n    readonly type = UPDATE_MENU_FAIL;\r\n    constructor(public payload : String) {} //Payload refers to error when meu is retrieved from backend here\r\n}\r\n\r\nexport class ClearMenu implements Action {\r\n    readonly type = CLEAR_MENU;\r\n}\r\n\r\nexport class UpdateRequestStatus implements Action {\r\n    readonly type = UPDATE_REQUEST_STATUS;\r\n    constructor(public payload : HttpRequestStatus) {}\r\n}\r\n\r\nexport type MenuActions = UpdateMenuStart | UpdateMenuSuccess | UpdateMenuFail | ClearMenu | UpdateRequestStatus;","import { InjectionToken, Injector } from '@angular/core';\r\n\r\nexport class DisplayService {\r\n    public createInjector(content : String) {\r\n        return Injector.create({\r\n          providers : [\r\n            { provide: CONTAINER_DATA, useValue : content}]\r\n        });\r\n      }\r\n}\r\nexport const CONTAINER_DATA = new InjectionToken<{}>('CONTAINER_DATA');","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { User } from 'src/app/shared/model/user.model';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  authenticatedUser : User;\r\n\r\n  constructor(private router:Router, \r\n              private store : Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.store.select('authenticatedUser').subscribe(( authenticatedUser : AuthenticatedUser ) => {\r\n      this.authenticatedUser = authenticatedUser.user;\r\n    });\r\n  }\r\n\r\n  //Displayed if user has not logged in\r\n  //If the user wants to login, display an intermediate auth-redirect page (this page in turn will redirect to keycloak authentication)\r\n  goToLoginOrRegister() : void {\r\n    this.router.navigateByUrl('/meal-planner/user-redirect');\r\n  }\r\n\r\n  //Displayed if user has not logged in\r\n  //If the user wants to continue as guest, redirect to meal-planner homepage. No intermediate auth-redirect page is required.\r\n  continueAsGuest() : void {\r\n    this.router.navigate(['/meal-planner']);\r\n  }\r\n\r\n  //Displayed if user has logged in\r\n  goToMealPlanner() : void {\r\n    this.router.navigate(['/meal-planner']);\r\n  }\r\n}","<section id=\"home\">\r\n\t<div class=\"home_text\">\r\n    <div class=\"left\">\r\n      <h1>Meal Optimizer</h1>\r\n      <p>Eat what you wish, on a budget</p>\r\n      <div class=\"d-flex justify-content-center\">\r\n        <button *ngIf=\"!authenticatedUser.loggedIn\" (click)='goToLoginOrRegister()' class=\"home_btn\">Login/Register</button>\r\n        <button *ngIf=\"!authenticatedUser.loggedIn\" (click)='continueAsGuest()' class=\"home_btn\">Continue as Guest</button>\r\n        <button *ngIf=\"authenticatedUser.loggedIn\" (click)='goToMealPlanner()' class=\"home_btn\">Go to Meal Planner</button>\r\n      </div>  \r\n    </div>\r\n\t\t<img src=\"../../../assets/images/background.jpg\" alt=\"meal optimizer\">\r\n  </div>\r\n</section>","import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  Router,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { KeycloakAuthGuard, KeycloakService } from 'keycloak-angular';\r\nimport { ConnectionStatusHandlerService } from './connection-status-handler.service';\r\nimport { environment } from '../../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuardService extends KeycloakAuthGuard {\r\n  constructor(\r\n    protected readonly router: Router,\r\n    protected readonly keycloak: KeycloakService,\r\n    private connectionStatusHandlerService:  ConnectionStatusHandlerService\r\n  ) {\r\n    super(router, keycloak);\r\n  }\r\n\r\n  public async isAccessAllowed(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ) {\r\n    \r\n    // Force the user to log in if currently unauthenticated.\r\n    if (!this.authenticated) {\r\n            \r\n      //NOTE: For future reference Request triggered from : window.location.origin + state.url);\r\n      await this.keycloak.login({\r\n        redirectUri: `${environment.apiUrl}:${environment.apiPort}/#/meal-planner/user-redirect`\r\n      });\r\n    }\r\n\r\n    //Do not allow navigation if the user is offline\r\n    if(!this.connectionStatusHandlerService.getConnectionStatus()) return false;\r\n\r\n    else return true;\r\n  }\r\n}","export const environment = {\r\n    production: false,\r\n    hostUrl : window.location.protocol + '//' + window.location.host,\r\n    apiUrl: window.location.protocol + '//' + window.location.host,\r\n    apiPort: 80,\r\n    applicationName : 'mealoptimizer',\r\n    envName : 'test'\r\n  };","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Meal } from '../../../../../shared/model/order-response.model';\r\n\r\n@Component({\r\n  selector: 'app-optimized-result-quality',\r\n  templateUrl: './optimized-result-quality.component.html',\r\n  styleUrls: ['./optimized-result-quality.component.css']\r\n})\r\nexport class OptimizedResultQualityComponent implements OnInit {\r\n  \r\n  /*\r\n   * qualityOptimizedPlan is set as input from optimized results table.\r\n   */\r\n  @Input() qualityOptimizedPlan;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}","<table class=\"table h-100 text-center\">\r\n  <thead>\r\n    <tr>\r\n      <th>Item Name</th>\r\n      <th>Optimized by quality</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  <ng-container *ngFor=\"let meal of qualityOptimizedPlan.mealList\">\r\n    <tr>\r\n      <td>{{meal.itemName}}</td>\r\n      <td>portion: {{meal.portion}}, cost: ${{meal.mealCost}}</td>\r\n    </tr>\r\n  </ng-container>\r\n<tr>\r\n  <td>Total cost:</td>\r\n  <td>{{ qualityOptimizedPlan.planCost }}</td>\r\n</tr>\r\n</tbody>\r\n</table>","import { User } from \"./user.model\";\r\n\r\nexport class UserBuilder {\r\n\r\n    user : User;\r\n\r\n    constructor(username : String) {\r\n        this.user = new User(username);\r\n    }\r\n\r\n    setFirstName(firstName : String) : UserBuilder {\r\n        this.user.firstName = firstName;\r\n        return this;\r\n    }\r\n\r\n    setLastName(lastName : String) : UserBuilder {\r\n        this.user.lastName = lastName;\r\n        return this;\r\n    }\r\n\r\n    setEmail(email : String) : UserBuilder {\r\n        this.user.email = email;\r\n        return this;\r\n    }\r\n\r\n    setPreferredDietType(preferredDietType : String) : UserBuilder {\r\n        this.user.preferredDietType = preferredDietType;\r\n        return this;\r\n    }\r\n\r\n    setAddress(address : String) : UserBuilder { \r\n        this.user.address = address;\r\n        return this;\r\n    }\r\n    \r\n    setMinLimits(nutrientMinLimits : Array<{String, number}>) : UserBuilder {\r\n        this.user.nutrientMinLimits = nutrientMinLimits;\r\n        return this;\r\n    }\r\n\r\n    setMaxLimits(nutrientMaxLimits : Array<{String, number}>) : UserBuilder {\r\n        this.user.nutrientMaxLimits = nutrientMaxLimits;\r\n        return this;\r\n    }\r\n\r\n    setToken(token : String) : UserBuilder {\r\n        this.user.token = token;\r\n        return this;\r\n    }\r\n\r\n    setLoggedIn(loggedIn : Boolean) : UserBuilder {\r\n        this.user.loggedIn = loggedIn;\r\n        return this;\r\n    }\r\n\r\n    build() : User {\r\n        return this.user;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-error-page',\r\n  templateUrl: './error-page.component.html',\r\n  styleUrls: ['./error-page.component.css']\r\n})\r\nexport class ErrorPageComponent implements OnInit {\r\n\r\n  errorMessage : String;\r\n  \r\n  constructor(private router:Router,  private route : ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.route.data.subscribe( (data: {errorMessage: String} ) => {\r\n      this.errorMessage = data['errorMessage'];\r\n    });\r\n  }\r\n\r\n  redirectToHome(): void {\r\n    this.router.navigate(['/app-info','home']);\r\n  }\r\n}","<h4>{{errorMessage}}</h4>\r\n<button (click)=\"redirectToHome()\">Go back home</button>","import { ShoppingItem } from '../../../../app/shared/model/shopping-item-model';\r\nimport * as ShoppingListActions from './shopping-list.actions';\r\n\r\nexport interface ShoppingList {\r\n  shoppingItems: ShoppingItem[];\r\n  editedshoppingItem: ShoppingItem;\r\n  editedshoppingItemIndex: number;\r\n}\r\n\r\nconst defaultShoppingList: ShoppingList = {\r\n  shoppingItems: [],\r\n  editedshoppingItem: null,\r\n  editedshoppingItemIndex: -1\r\n};\r\n\r\nexport function shoppingListReducer(\r\n  state: ShoppingList = defaultShoppingList,\r\n  action: ShoppingListActions.ShoppingListActions) {\r\n\r\n  let updatedShoppingList : ShoppingItem[] = null;\r\n  \r\n  switch (action.type) {\r\n    \r\n    case ShoppingListActions.ADD_INGREDIENT:\r\n\r\n      updatedShoppingList = (verifyIfShoppingItemExists(action.payload, state.shoppingItems))?mergeWithExistingShoppingItem(action.payload, state.shoppingItems):addNewShoppingItem(action.payload, state.shoppingItems); \r\n      \r\n      return {\r\n        ...state,\r\n        shoppingItems: updatedShoppingList\r\n      };\r\n    \r\n    case ShoppingListActions.ADD_INGREDIENTS:\r\n      updatedShoppingList = state.shoppingItems;\r\n      action.payload.forEach((shoppingItem : ShoppingItem) => {\r\n        updatedShoppingList = (verifyIfShoppingItemExists(shoppingItem, updatedShoppingList))?mergeWithExistingShoppingItem(shoppingItem, updatedShoppingList):addNewShoppingItem(shoppingItem, updatedShoppingList); \r\n      });\r\n    \r\n      return {\r\n        ...state,\r\n        shoppingItems: updatedShoppingList\r\n      };\r\n    \r\n    case ShoppingListActions.UPDATE_INGREDIENT:\r\n      \r\n      //If name is not updated, only update the item.\r\n      if(!action.payload.itemNameUpdated) {\r\n        updatedShoppingList = updateCurrentShoppingList(action.payload.shoppingItem, state.shoppingItems);\r\n      }\r\n      //If name is updated, check if we can merge it with an existing item in the list\r\n      else {\r\n        updatedShoppingList = (verifyIfShoppingItemExists(action.payload.shoppingItem, state.shoppingItems))?mergeWithExistingShoppingItem(action.payload.shoppingItem, state.shoppingItems):addNewShoppingItem(action.payload.shoppingItem, state.shoppingItems); \r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        shoppingItems: updatedShoppingList,\r\n        editedshoppingItemIndex: -1,\r\n        editedshoppingItem: null\r\n      };\r\n\r\n    case ShoppingListActions.DELETE_INGREDIENT:\r\n      return {\r\n        ...state,\r\n        shoppingItems: state.shoppingItems.filter((ig, igIndex) => {\r\n          return igIndex !== state.editedshoppingItemIndex;\r\n        }),\r\n        editedshoppingItemIndex: -1,\r\n        editedshoppingItem: null\r\n      };\r\n    \r\n    case ShoppingListActions.START_EDIT:\r\n      \r\n      return {\r\n        ...state,\r\n        editedshoppingItemIndex: action.payload,\r\n        editedshoppingItem: { ...state.shoppingItems[action.payload] }\r\n      };\r\n    \r\n    case ShoppingListActions.STOP_EDIT:\r\n      return {\r\n        ...state,\r\n        editedshoppingItem: null,\r\n        editedshoppingItemIndex: -1\r\n      };\r\n    \r\n    case ShoppingListActions.CLEAR_SHOPPING_LIST:\r\n      return defaultShoppingList;\r\n             \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction verifyIfShoppingItemExists(newShoppingItem : ShoppingItem, currentShoppingList : ShoppingItem[]) : boolean {\r\n  let shoppingItemExists : boolean = false;\r\n    currentShoppingList.forEach((existingShoppingItem : ShoppingItem) => {\r\n      if(!shoppingItemExists && existingShoppingItem.name.toLowerCase() === newShoppingItem.name.toLowerCase())\r\n      shoppingItemExists = true;\r\n    });\r\n    return shoppingItemExists;\r\n  }\r\n\r\nfunction mergeWithExistingShoppingItem(newShoppingItem : ShoppingItem, currentShoppingList : ShoppingItem[]) : ShoppingItem[] {\r\n  let updatedShoppingList : ShoppingItem[] = currentShoppingList.slice();\r\n  let shoppingItemMerged : boolean = false;\r\n  let mergedShoppingItem : ShoppingItem = null;\r\n  currentShoppingList.forEach((existingShoppingItem : ShoppingItem, index : number) => {\r\n    if(!shoppingItemMerged && (existingShoppingItem.name.toLowerCase() === newShoppingItem.name.toLowerCase())) {\r\n      mergedShoppingItem = new ShoppingItem(existingShoppingItem.name, newShoppingItem.amount + existingShoppingItem.amount, existingShoppingItem.measure, mergeLabels(existingShoppingItem.labels, newShoppingItem.labels));\r\n      updatedShoppingList[index] = mergedShoppingItem;\r\n      shoppingItemMerged = true;\r\n  }});\r\n  return updatedShoppingList;\r\n}\r\n\r\nfunction mergeLabels(existingLabels : Array<String>, newLabels : Array<String>) :Array <String> {\r\n  let mergedLabels : Array<String> = existingLabels.slice();\r\n  newLabels.forEach((newLabel : String) => {\r\n    if(!existingLabels.includes(newLabel)) { \r\n      mergedLabels.push(newLabel); \r\n    }\r\n  });\r\n  return mergedLabels;\r\n}\r\n\r\nfunction addNewShoppingItem(newShoppingItem : ShoppingItem, currentShoppingList : ShoppingItem[]) : ShoppingItem[] {\r\n  let updatedShoppingList : ShoppingItem[] = currentShoppingList.slice();\r\n  updatedShoppingList.push(newShoppingItem);\r\n  return updatedShoppingList;\r\n}\r\n\r\nfunction updateCurrentShoppingList(editedShoppingItem : ShoppingItem, currentShoppingList : ShoppingItem[]) : ShoppingItem[] {\r\n  let updatedShoppingList : ShoppingItem[] = currentShoppingList.slice();\r\n  currentShoppingList.forEach((existingShoppingItem : ShoppingItem, index : number) => {\r\n    if(existingShoppingItem.name.toLowerCase() === editedShoppingItem.name.toLowerCase())\r\n      updatedShoppingList[index] = editedShoppingItem;\r\n  });\r\n  return updatedShoppingList;\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { ErrorHandler } from './error-handler';\r\nimport { NotificationDisplayService } from '../notification-display.service';\r\n\r\n@Injectable({ providedIn : 'root' })\r\n//Handles connection loss. Called from inside ConnectionStatusHandler.\r\nexport class ConnectionLossErrorHandler extends ErrorHandler {\r\n    \r\n    constructor(private notificationDisplayService : NotificationDisplayService) {\r\n        super();\r\n    }\r\n    \r\n    public handleError() : String {\r\n        this.notificationDisplayService.showNotification(\r\n            'Connection lost. Some features may not be available.');\r\n        return super.handleError();\r\n    }\r\n}","import { OrderResponse } from '../../../../shared/model/order-response.model';\r\nimport { HttpRequestStatus } from '../../../../shared/http-request-status.enum';\r\nimport * as OrderActions from '../actions/order.actions';\r\n\r\nexport interface OptimizedMealPlans {\r\n    mealPlans : OrderResponse,\r\n    error : String,\r\n    requestStatus : HttpRequestStatus\r\n}\r\n\r\nconst defaultMealPlans : OptimizedMealPlans = {\r\n    mealPlans : null,\r\n    error : null,\r\n    requestStatus : HttpRequestStatus.NO_ACTION\r\n};\r\n\r\nexport function orderReducer(state : OptimizedMealPlans = defaultMealPlans, action : OrderActions.OrderActions) {\r\n    switch(action.type) {\r\n\r\n        case OrderActions.SAVE_ORDER_SUCCESS :\r\n            return { ...state, mealPlans : action.payload, error : null, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED };\r\n\r\n        case OrderActions.SAVE_ORDER_FAIL:\r\n            return { ...state, mealPlans : null, error : action.payload, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED };\r\n\r\n        case OrderActions.UPDATE_REQUEST_STATUS:\r\n            return { ...state, error : null, requestStatus : action.payload };\r\n\r\n        case OrderActions.CLEAR_ORDER:\r\n            return defaultMealPlans;\r\n            \r\n        default : return state;\r\n    }\r\n}","import { HttpClient, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Actions, Effect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { Recipe } from \"../../../../shared/model/recipe.model\";\r\nimport * as RecipesActions from '../actions/recipes.actions';\r\nimport { RecipeResponseHandler } from '../../../../shared/services/response-handler/recipe-response-handler';\r\n\r\nimport { environment } from '../../../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class RecipesEffects {\r\n\r\n    constructor(private http : HttpClient, \r\n                private actions$ : Actions,\r\n                private recipeResponseHandler : RecipeResponseHandler) {}\r\n\r\n    @Effect()\r\n    fetchRecipes = this.actions$.pipe(\r\n        ofType<RecipesActions.FetchRecipesStart>(RecipesActions.FETCH_RECIPES_START),\r\n        switchMap((fetchRecipesAction : RecipesActions.FetchRecipesStart) => {\r\n            const url = `${environment.hostUrl}/${environment.applicationName}/recipe/find`;\r\n            const params = new HttpParams()\r\n                        .set('names', fetchRecipesAction.payload.join());\r\n            return this.http.get<Recipe[]>(url, {params}).pipe(\r\n                map((recipes : Recipe[]) => {\r\n                    return this.recipeResponseHandler.handleSuccess(recipes);\r\n                }),\r\n                catchError((errorRes : any) => {\r\n                    return this.recipeResponseHandler.handleFailure(errorRes);\r\n                })\r\n            )\r\n        })\r\n    );\r\n}","export enum OptimizationMode {\r\n    CREATE = 'create',\r\n    UPDATE = 'update'\r\n}","import { Component, Input, OnInit } from '@angular/core';\r\n\r\nimport { IUserDietType } from '../../shared/services/user-diet-type-resolver.service';\r\n\r\n//This component handles routing, link to optimizationService via controller\r\n@Component({\r\n  selector: 'app-meal-optimizer',\r\n  templateUrl: './meal-optimizer.component.html',\r\n  styleUrls: ['./meal-optimizer.component.css']\r\n})\r\nexport class MealOptimizerComponent implements OnInit {\r\n\r\n  constructor() {\r\n  }\r\n\r\n  // Set inside meal-planner.html\r\n  @Input() dietTypes : Array<IUserDietType>;\r\n\r\n  ngOnInit(): void { }\r\n}","<div class=\"row custom-display mt-4 ml-1\">\r\n            <div class=\"custom-diet-type-width\">\r\n                <app-user-diet-type [dietTypes]='dietTypes'></app-user-diet-type>\r\n            </div>\r\n            <div class=\"custom-delivery-date-width\">\r\n                <app-delivery-date-selector></app-delivery-date-selector>\r\n            </div>\r\n    </div>\r\n    <div class=\"row mt-4 ml-1\">\r\n        <div class=\"col-11\">\r\n            <app-meal-selector></app-meal-selector>\r\n        </div>    \r\n    </div>\r\n    <div class=\"row mt-4 ml-1\">\r\n        <div class=\"col-11\">\r\n            <app-optimized-meal-plan class=\"col-11 justify-content-start\"></app-optimized-meal-plan>\r\n        </div>    \r\n    </div>","import { Injectable } from '@angular/core';\r\nimport { UserDietService } from './http/user-diet.service';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Resolve } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface IUserDietType {\r\n    dietType : String;\r\n    displayValue : String;\r\n}\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class UseDietTypeResolver implements Resolve<IUserDietType[]> {\r\n    \r\n    constructor(private userDietService : UserDietService) {}\r\n    \r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable<IUserDietType[]> | Promise<IUserDietType[]> | IUserDietType[] {\r\n        //To be changed to fetch diet types from cache using service worker if a copy is available.\r\n        return this.userDietService.getDietTypes();\r\n    }\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { CONTAINER_DATA } from '../../services/display.service';\r\n\r\n@Component({\r\n  selector: 'app-custom-notification',\r\n  templateUrl: './custom-notification.component.html',\r\n  styleUrls: ['./custom-notification.component.css']\r\n})\r\nexport class CustomNotificationComponent implements OnInit {\r\n\r\n  message : String;\r\n\r\n  constructor(@Inject(CONTAINER_DATA) message) { \r\n    this.message = message;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}","<div class=\"notification\">{{ message }}</div>","import * as UserPreferenceActions from '../actions/user-preferences.actions';\r\n\r\nexport interface UserPreferences {\r\n        dietType : String,\r\n        deliveryDate : Date,\r\n        mealSelected : Array<String>,\r\n\t    optimizationTypeSelected : String;\r\n}\r\n\r\nconst defaultPreferences : UserPreferences = {\r\n        dietType : null,\r\n        deliveryDate : new Date(), //today is set as default date\r\n        mealSelected : new Array<String>(4),\r\n\t    optimizationTypeSelected : null\r\n};\r\n\r\n\r\nexport function userPreferencesReducer(state : UserPreferences = defaultPreferences, action : UserPreferenceActions.UserPreferencesActions) : UserPreferences {\r\n\tswitch(action.type) {\r\n\t\t\r\n        case UserPreferenceActions.EDIT_DIET_TYPE : \r\n            return { ...state, dietType : action.payload };\r\n        \r\n        case UserPreferenceActions.EDIT_DELIVERY_DATE : \r\n            return { ...state, deliveryDate : action.payload };\r\n\t\t\t\r\n\t\tcase UserPreferenceActions.UPDATE_MEAL:\r\n            let modifiedMealList : Array<String> = [...state.mealSelected];\r\n            modifiedMealList[action.payload.itemPosition] = action.payload.itemName;\r\n            return {...state, mealSelected: modifiedMealList };\r\n \r\n        case UserPreferenceActions.OPTIMIZATION_TYPE_SELECTED:\r\n            return {...state, optimizationTypeSelected : action.payload};\r\n\r\n        case UserPreferenceActions.CLEAR_USER_PREFERENCES:\r\n            return defaultPreferences;\r\n\r\n        default : return state;\r\n    }\r\n}","import { DatePipe } from '@angular/common';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { UserPreferences } from 'src/app/meal-planner/meal-optimizer/store/reducers/user-preferences.reducer';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { User } from '../model/user.model';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class OrderService {\r\n\r\n    orderRequest : { id?: number,\r\n                     deliveryDate: String, \r\n                     mealSelected: Array<String>, \r\n                     optimizationTypes: Array<String>, \r\n                     username : String }; // This is different from order.model.ts since it will have the order response, this on the other hand is the order info entered by the user\r\n\r\n    userPrefs : UserPreferences;\r\n\r\n    constructor(private datePipe: DatePipe,\r\n                private store : Store<AppState>) { \r\n                this.store.select('userPreferences').subscribe((userPrefs : UserPreferences) => {\r\n                    this.userPrefs = userPrefs;\r\n                  });\r\n                }\r\n\r\n    createOrderRequest(deliveryDate: Date, mealList: Array<String>, user : User, id? : number) {\r\n      this.orderRequest =  {\r\n            deliveryDate : this.datePipe.transform(deliveryDate, 'MM/dd/yyyy'),\r\n            mealSelected : mealList,\r\n            optimizationTypes : ['COST','REWARD'],\r\n            username : user.username\r\n        };\r\n\r\n        //Set optional param id(orderId) if it is available. 'id' is available for update meal plan only, not for create meal plan.\r\n        //id is also unavailable for guest accounts since the meal plans are not saved in the DB for guests.\r\n        if(id) this.orderRequest.id = id;\r\n        \r\n        return this.orderRequest;\r\n    }\r\n\r\n    verifyAllInputsAreReceived() {\r\n        return (this.userPrefs.dietType !==null &&\r\n                this.userPrefs.deliveryDate !==null && \r\n                (this.userPrefs.mealSelected.filter(\r\n                    (meal) => meal !== undefined ).length) === 4);\r\n    }\r\n}","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Meal } from '../../../../../shared/model/order-response.model';\r\n\r\n@Component({\r\n  selector: 'app-optimized-result-cost',\r\n  templateUrl: './optimized-result-cost.component.html',\r\n  styleUrls: ['./optimized-result-cost.component.css']\r\n})\r\nexport class OptimizedResultCostComponent implements OnInit {\r\n  \r\n  /*\r\n   * costOptimizedPlan is set as input from optimized results table.\r\n   */\r\n  @Input() costOptimizedPlan;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}","<table class=\"table h-100 text-center\">\r\n  <thead>\r\n    <tr>\r\n      <th>Item Name</th>\r\n      <th>Optimized by cost</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  <ng-container *ngFor=\"let meal of costOptimizedPlan.mealList\">\r\n    <tr>\r\n      <td>{{meal.itemName}}</td>\r\n      <td>portion: {{meal.portion}}, cost: ${{meal.mealCost}}</td>\r\n    </tr>\r\n  </ng-container>\r\n<tr>\r\n  <td>Total cost:</td>\r\n  <td>{{ costOptimizedPlan.planCost }}</td>\r\n</tr>\r\n</tbody>\r\n</table>","import { NgModule } from '@angular/core';\r\n\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AppInfoComponent } from '../app-info/app-info.component';\r\nimport { HomeComponent } from '../app-info/home/home.component';\r\nimport { ContactUsComponent } from '../app-info/contact-us/contact-us.component';\r\nimport { AppInfoRoutingModule } from '../app-info/app-info-routing.module';\r\n\r\n@NgModule({\r\n    declarations : [\r\n        AppInfoComponent,\r\n        HomeComponent,\r\n        ContactUsComponent\r\n    ],\r\n    imports : [\r\n        CommonModule,\r\n        BrowserAnimationsModule,\r\n        FormsModule,\r\n        AppInfoRoutingModule\r\n    ]\r\n})\r\nexport class AppInfoModule {}","import { Injectable } from '@angular/core';\r\nimport { ConnectionService } from 'ng-connection-service';\r\n\r\nimport { ConnectionLossErrorHandler } from './error-handler/connection-loss-error-handler';\r\nimport { IndexedDBService } from './indexeddb/indexed-db.service';\r\nimport { NotificationDisplayService } from './notification-display.service';\r\nimport { ActionDispatcher } from '../services/action-dispatcher.service';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class ConnectionStatusHandlerService {\r\n \r\n    private isConnected : boolean = navigator.onLine;\r\n \r\n    constructor(private connectionService : ConnectionService,\r\n                private connectionLossErrorHandler : ConnectionLossErrorHandler,\r\n                private notificationDisplayService : NotificationDisplayService,\r\n                private indexedDBService : IndexedDBService,\r\n                private actionDispatcher : ActionDispatcher) {\r\n                    \r\n        this.connectionService.monitor().subscribe((connectionStatus : boolean) => {\r\n            this.isConnected = connectionStatus;\r\n            if(!connectionStatus) { this.handleConnectionLoss(); }\r\n            if(connectionStatus) { this.handleConnectionFix(); }\r\n        });  \r\n    }\r\n\r\n    getConnectionStatus() : boolean {\r\n        return this.isConnected;\r\n    }\r\n\r\n    handleConnectionLoss() : void {\r\n        this.connectionLossErrorHandler.handleError();\r\n    }\r\n\r\n    handleConnectionFix() {\r\n        //Show notification\r\n        this.notificationDisplayService.showNotification(\r\n            'Connection fixed. We will try to process your requests');\r\n        //Read failed requests from indexedDB and call backend.\r\n        this.indexedDBService.getAllEntries()\r\n                             .then((failedRequests : Map<string, any>) => {\r\n                                failedRequests.forEach(async (failedRequest, tag) => {\r\n                                    await this.actionDispatcher.dispatchAction(failedRequest, tag);\r\n                                    this.indexedDBService.deleteRequest(tag);\r\n                                });\r\n                             });    \r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpErrorResponse\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\n\r\nimport { AppErrorHandler } from '../error-handler/app-error-handler';\r\n\r\n@Injectable()\r\nexport class ErrorInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private appErrorHandler : AppErrorHandler) {}\r\n\r\n    intercept(request : HttpRequest<any>, next : HttpHandler) : Observable<HttpEvent<any>> {\r\n        return next.handle(request).pipe(\r\n            retry(1),\r\n            catchError( err => {                \r\n                let errMsg : String = '';\r\n                if(err instanceof ErrorEvent) { \r\n                    //Log to common logging service\r\n                    errMsg = this.appErrorHandler.handleError();\r\n                }\r\n                else if(err instanceof HttpErrorResponse) {\r\n                    //Log to common logging service\r\n                    errMsg = this.appErrorHandler.handleError(err.status);\r\n                }\r\n                return throwError(errMsg);\r\n            })\r\n        );\r\n    }\r\n}","export enum OptimizationTypeMapping {\r\n    REWARD = 'QUALITY', \r\n    COST = 'COST'\r\n}\r\n\r\nexport enum OptimizationSelectionMapping {\r\n    COST = 'optimizedByCost',\r\n    REWARD = 'optimizedByQuality'\r\n}","import { Action } from '@ngrx/store';\r\n\r\nimport { User } from '../../../shared/model/user.model';\r\n\r\n/* \r\n * Names of actions are self explanatory.\r\n */\r\n\r\nexport const LOGIN_SUCCESS = '[User mgmt] LOGIN_SUCCESS';\r\nexport const LOGIN_ERROR = '[User mgmt] LOGIN_ERROR';\r\nexport const LOGOUT = '[User mgmt] LOGOUT';\r\n\r\nexport class LoginSuccess implements Action {\r\n    readonly type = LOGIN_SUCCESS;\r\n    constructor(public payload  : User) {}\r\n}\r\n\r\nexport class LoginError implements Action {\r\n    readonly type = LOGIN_ERROR;\r\n    constructor(public payload  : String) {}\r\n}\r\n\r\nexport class Logout implements Action {\r\n    readonly type = LOGOUT;\r\n}\r\n\r\nexport type UserMgmtActions = LoginSuccess | LoginError | Logout;","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AppState } from './store/reducers/app.reducer';\r\nimport * as UserMgmtActions from './user-mgmt/store/actions/user-mgmt.actions';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n \r\n  constructor(private store : Store<AppState>) { }\r\n\r\n  ngOnInit() { }\r\n}","<div class=\"container\">\r\n    <div class=\"row p-5\">\r\n        <div class=\"col-12\">\r\n            <app-header></app-header>\r\n        </div>\r\n    </div>\r\n    <div class=\"row\">\r\n        <div class=\"col-11 mx-md-5 mx-xs-1\">\r\n            <router-outlet></router-outlet>\r\n        </div>    \r\n    </div>\r\n</div>","import { Action } from '@ngrx/store';\r\nimport { OrderResponse } from '../../../../shared/model/order-response.model';\r\nimport { HttpRequestStatus } from '../../../../shared/http-request-status.enum';\r\n\r\nexport const SAVE_ORDER_START = '[Get meal plan] SAVE_ORDER_START';\r\nexport const SAVE_ORDER_SUCCESS = '[Get meal plan] SAVE_ORDER_SUCCESS';\r\nexport const SAVE_ORDER_FAIL = '[Get meal plan] SAVE_ORDER_FAIL';\r\nexport const UPDATE_REQUEST_STATUS = '[Get meal plan] UPDATE_REQUEST_STATUS';\r\nexport const CLEAR_ORDER = '[Get meal plan] CLEAR_ORDER';\r\n\r\nexport class SaveOrderStart implements Action {\r\n    readonly type = SAVE_ORDER_START;\r\n    constructor(public payload : { id?: number, deliveryDate: String, mealSelected: Array<String>, optimizationTypes: Array<String>, username : String }) {}\r\n}\r\n\r\nexport class SaveOrderSuccess implements Action {\r\n    readonly type = SAVE_ORDER_SUCCESS;\r\n    constructor(public payload : OrderResponse) {}\r\n}\r\n\r\nexport class SaveOrderFail implements Action {\r\n    readonly type = SAVE_ORDER_FAIL;\r\n    constructor(public payload : String) {}\r\n}\r\n\r\nexport class UpdateRequestStatus implements Action {\r\n    readonly type = UPDATE_REQUEST_STATUS;\r\n    constructor(public payload : HttpRequestStatus) {}\r\n}\r\n\r\nexport class ClearOrder implements Action {\r\n    readonly type = CLEAR_ORDER;\r\n}\r\n\r\nexport type OrderActions = SaveOrderStart | SaveOrderSuccess | SaveOrderFail | UpdateRequestStatus | ClearOrder;","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { switchMap, map, catchError, share } from 'rxjs/operators';\r\n\r\nimport * as MenuActions from '../actions/menu.actions';\r\nimport { MenuResponseHandler } from '../../../../shared/services/response-handler/menu-response-handler';\r\n\r\nimport { environment } from '../../../../../environments/environment';\r\n\r\n@Injectable()\r\nexport class MenuEffects {\r\n\r\n    constructor(private http : HttpClient, \r\n                private actions$ : Actions,\r\n                private menuResponseHandler : MenuResponseHandler) {}\r\n\r\n    @Effect()\r\n    fetchMenuFromBackend = this.actions$.pipe(\r\n        ofType<MenuActions.UpdateMenuStart>(MenuActions.UPDATE_MENU_START),\r\n        switchMap((updateMenuAction : MenuActions.UpdateMenuStart) => {\r\n            return this.http.get<String[]>(`${environment.hostUrl}/${environment.applicationName}/menu/find`,\r\n                {\r\n                    'params' : new HttpParams().set('category', updateMenuAction.payload.toString())\r\n                }).pipe(share(),\r\n                map(\r\n                    (menu : String[]) => {\r\n                        return this.menuResponseHandler.handleSuccess(menu);\r\n                }),\r\n                catchError(\r\n                    (errorRes : any) => {\r\n                        return this.menuResponseHandler.handleFailure(errorRes);\r\n                    }\r\n                ))\r\n    }));\r\n}","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { RecipeService } from 'src/app/shared/services/recipe.service';\r\nimport { OptimizationService } from 'src/app/shared/services/optimization.service';\r\nimport { ShoppingItem } from 'src/app/shared/model/shopping-item-model';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { UserPreferences } from 'src/app/meal-planner/meal-optimizer/store/reducers/user-preferences.reducer';\r\nimport { Recipe } from 'src/app/shared/model/recipe.model';\r\nimport { Ingredient } from 'src/app/shared/model/ingredient.model';\r\n\r\nimport * as ShoppingListActions from '../../shopping-list/store/shopping-list.actions';\r\nimport * as UserDisplayPreferencesActions from '../../../user-mgmt/store/actions/user-display-preferences.actions';\r\nimport { UserDisplayPreferences } from 'src/app/user-mgmt/store/reducers/user-display-preferences.reducer';\r\n\r\n@Component({\r\n  selector: 'app-recipe-detail',\r\n  templateUrl: './recipe-detail.component.html',\r\n  styleUrls: ['./recipe-detail.component.css']\r\n})\r\nexport class RecipeDetailComponent implements OnInit, OnDestroy {\r\n\r\n  recipeSelected : Recipe;\r\n  id: number;\r\n  noOfPortions : number;\r\n\r\n  shoppingItems : ShoppingItem[];\r\n\r\n  optimizationTypeSelected : String;\r\n  \r\n  ngOnInit(): void {\r\n\r\n    this.optimizationTypeSelected = 'COST';\r\n\r\n    /*\r\n     * We need to know optimizationType selected by the user since the no of portions varies based on the optimization type.\r\n     */\r\n    this.store.select('userPreferences').subscribe((userPreferences : UserPreferences) => {\r\n      this.optimizationTypeSelected = userPreferences.optimizationTypeSelected;\r\n    });\r\n\r\n    /*\r\n     * Select the recipe based on the ID and name. \r\n     */\r\n    this.store.select('userDisplayPreferences').subscribe((userDisplayPreferences : UserDisplayPreferences) => {\r\n      if(userDisplayPreferences.recipeSelected != null) {\r\n        this.id = userDisplayPreferences.recipeSelected.id;\r\n        this.recipeSelected = this.recipeService.getRecipeById(this.id);\r\n        this.noOfPortions = this.optimizationService.getPortionCountByOptimizationTypeMealName(this.optimizationTypeSelected, this.recipeSelected.name);\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(private recipeService: RecipeService, private optimizationService : OptimizationService, private router : Router, private store : Store<AppState>) {}\r\n\r\n  /*\r\n   * When 'Add to Shopping List' is clicked, show shopping list section, and dispatch a ShoppingList action.\r\n   */\r\n  onAddToShoppingList(): void {\r\n    this.store.dispatch(new UserDisplayPreferencesActions.ShowShoppingList());\r\n    this.shoppingItems = new Array<ShoppingItem>();\r\n    this.recipeSelected.ingredients.forEach((ingredient : Ingredient) => {\r\n      this.shoppingItems.push(\r\n        new ShoppingItem(ingredient.name, \r\n              ingredient.quantity.amount * this.noOfPortions, \r\n              ingredient.quantity.measure,\r\n              (ingredient.labels === undefined)?[this.recipeSelected.name]:ingredient.labels\r\n      ));\r\n    });\r\n    this.store.dispatch(new ShoppingListActions.AddIngredients(this.shoppingItems));\r\n  }\r\n\r\n  ngOnDestroy() {}\r\n}","<div class=\"mt-md-0 mt-sm-5\">\r\n    <img \r\n            [src]=\"recipeSelected.imageUrl\" \r\n            alt=\"{{ recipeSelected.name }}\" \r\n            class=\"img-responsive custom-recipe-detail-layout\"\r\n            style=\"max-height : 300px\">\r\n            <h4>{{recipeSelected.name}}</h4>\r\n            <a href=\"{{recipeSelected.tutorialPath}}\"> Watch the tutorial here </a><br/>\r\n            <label for=\"noOfPortions\">No. of portions</label>\r\n            <input class=\"col-lg-2 col-md-3 col-sm-2 ml-1\" type=\"number\" id=\"noOfPortions\" [(ngModel)]=\"noOfPortions\" min=\"1\"><br/>\r\n            <p>Ingredients</p>\r\n            <table>\r\n            <tr *ngFor=\"let ingredient of recipeSelected.ingredients\">\r\n                    <td>{{ ingredient.name }}</td>\r\n                    <td style=\"text-align:right\">: {{ ingredient.quantity.amount * noOfPortions }} ({{ ingredient.quantity.measure}})</td>\r\n            </tr>\r\n            <tr>\r\n                <td>\r\n                    <button type=\"button\" class=\"btn btn-dark my-2\" (click)=\"onAddToShoppingList()\">Add ingredients to shopping list\r\n                    </button>\r\n                </td>\r\n            </tr>        \r\n        </table>\r\n</div>    ","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { UserPreferences } from '../store/reducers/user-preferences.reducer';\r\nimport * as RecipesActions from '../../../meal-planner/recipes/store/actions/recipes.actions';\r\nimport * as UserDisplayPreferencesActions from '../../../user-mgmt/store/actions/user-display-preferences.actions';\r\nimport { OptimizedMealPlans } from '../store/reducers/order.reducer';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { Meal } from 'src/app/shared/model/order-response.model';\r\nimport { OptimizationService } from 'src/app/shared/services/optimization.service';\r\nimport { DefaultMessages } from 'src/app/shared/default-messages';\r\n\r\n@Component({\r\n  selector: 'app-optimized-meal-plan',\r\n  templateUrl: './optimized-meal-plan.component.html',\r\n  styleUrls: ['./optimized-meal-plan.component.css']\r\n})\r\n/*\r\n * This component has 2 sections:\r\n * Sec. 1: Display optimization results\r\n * Sec. 2: Handle optimization results (Get Recipe / Place Order)\r\n * \r\n * It handles 3 tasks:\r\n * (1) Allows the user to place online order/get recipe only if the below conditions are met:\r\n *     -> The optimized meal plans have state DISTINCT/OPTIMAL/FEASIBLE. All other states are negative i.e. a meal plan that satisfies all nutitional requirements could not be created for the selected meals.\r\n *     -> Either Optimized by Cost or Optimized by Quality was selected\r\n * (2) Reroute the user to either recipes section or online order section based on option selected. The correct secion is loaded based on the route.\r\n * (3) Display help text 'Select a different meal plan' if meal plan cannot be created from meals selected (optimization state !== DISTINCT | OPTIMAL | FEASIBLE)\r\n */\r\nexport class OptimizedMealPlanComponent implements OnInit, OnDestroy {\r\n\r\n  // Allow user to place online order / get recipe based on \r\n  // value in userPreferences.optimizationTypeSelected (optimize by cost | optimize by quality)\r\n  userPreferences : UserPreferences;\r\n\r\n  optimizationError : String;\r\n\r\n  //We do not know if optimization is possible, set to true preemptively\r\n  isOptimizationFeasible : boolean = true;\r\n\r\n  costOptimizedPlan : { mealList : Meal[], planCost: number, optimizationType : String };\r\n  \r\n  qualityOptimizedPlan : { mealList : Meal[], planCost: number, optimizationType : String };\r\n  \r\n  defaultText : String = DefaultMessages.mealPlan.get(HttpRequestStatus.NO_ACTION);\r\n\r\n  responseReceived : boolean = false;\r\n\r\n  constructor(private router : Router, \r\n              private store : Store<AppState>, \r\n              private route : ActivatedRoute,\r\n              private optimizationService : OptimizationService) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.store.select('userPreferences').subscribe((userPrefs : UserPreferences) => {\r\n      this.userPreferences = userPrefs;\r\n    });\r\n\r\n    // Display optimized meal plan received from the backend.\r\n    this.store.select('optimizedPlans').subscribe((optimizedMealPlans : OptimizedMealPlans) => {\r\n      switch(optimizedMealPlans.requestStatus) {\r\n        \r\n        case HttpRequestStatus.NO_ACTION : this.isOptimizationFeasible = true;\r\n                                           this.responseReceived = false; \r\n                                           this.defaultText = DefaultMessages.mealPlan.get(HttpRequestStatus.NO_ACTION); \r\n                                           break;\r\n        \r\n        case HttpRequestStatus.REQUEST_SENT : this.isOptimizationFeasible = true;\r\n                                              this.responseReceived = false;\r\n                                              this.defaultText = DefaultMessages.mealPlan.get(HttpRequestStatus.REQUEST_SENT);\r\n                                              break;\r\n                                              \r\n        case HttpRequestStatus.RESPONSE_RECEIVED : {\r\n                                        this.defaultText = DefaultMessages.mealPlan.get(HttpRequestStatus.RESPONSE_RECEIVED);\r\n                                        this.responseReceived = true;\r\n                                        //If there is an error, display error message.\r\n                                        if(optimizedMealPlans.error) {\r\n                                          this.optimizationError = optimizedMealPlans.error;\r\n                                        }\r\n                                        else {\r\n                                          //If there is no error, clear existing error first\r\n                                          this.optimizationError = null;\r\n                                          if(optimizedMealPlans.mealPlans) {  \r\n                                            let optimizationState = optimizedMealPlans.mealPlans.optimizationState;\r\n                                            //Check if optimization was successful - one of the below 3 states\r\n                                            if(optimizationState === 'DISTINCT' || \r\n                                               optimizationState === 'OPTIMAL' || \r\n                                               optimizationState === 'FEASIBLE') {\r\n                                              this.isOptimizationFeasible = true;\r\n                                              this.costOptimizedPlan = this.optimizationService.getMealPlanByOptimizationType('COST', optimizedMealPlans.mealPlans);\r\n                                              this.qualityOptimizedPlan = this.optimizationService.getMealPlanByOptimizationType('QUALITY', optimizedMealPlans.mealPlans);  \r\n                                            }\r\n                                            //If optimization was not successful. OptimizationState is not DISTINCT | OPTIMAL | FEASIBLE\r\n                                            else {\r\n                                              this.isOptimizationFeasible = false;\r\n                                            }\r\n                                        }\r\n        }                                      \r\n      }\r\n    }});\r\n  }\r\n\r\n  /*\r\n   * The user can perform one of the below actions - place online order / get recipe.\r\n   */\r\n  placeOrderSelected() {\r\n    this.router.navigate([ 'meal-planner' , \r\n                         { outlets : { mealoptimizer : 'meal-optimizer', onlineorder : ['online-order'] } }] ,  \r\n                         { queryParams : this.route.snapshot.queryParams });\r\n  }\r\n\r\n  getRecipeSelected() {\r\n    this.store.dispatch(new UserDisplayPreferencesActions.ShowRecipes());\r\n    this.store.dispatch(new RecipesActions.UpdateRequestStatus(HttpRequestStatus.REQUEST_SENT));\r\n    this.store.dispatch(new RecipesActions.FetchRecipesStart(this.userPreferences.mealSelected));\r\n  }\r\n\r\n  get allowUserToPlaceOrderOrGetRecipe() : boolean {\r\n    if(this.userPreferences.optimizationTypeSelected && \r\n       this.userPreferences.optimizationTypeSelected !== 'orderInfo' && \r\n       this.isOptimizationFeasible &&\r\n       this.responseReceived) return true;\r\n    else return false;\r\n  }\r\n\r\n  ngOnDestroy() { }\r\n}","<div class=\"row ml-4\" *ngIf=\"optimizationError\">\r\n    {{ optimizationError }}\r\n</div>\r\n<div class=\"row ml-4\" *ngIf=\"!isOptimizationFeasible\">\r\n    Sorry, the meals you have selected does not satisfy your daily nutrition requirements. Please choose a different meal plan.\r\n<hr/>\r\n</div>\r\n<h4 class=\"row justify-content-start py-4\">Step 4: Results</h4>\r\n<app-optimized-results-table\r\n    class=\"w-80 ml-4\"\r\n        [costOptimizedPlan] = \"costOptimizedPlan\"\r\n        [qualityOptimizedPlan] = \"qualityOptimizedPlan\"\r\n        [isOptimizationFeasible] = \"isOptimizationFeasible\"\r\n        [defaultText] = \"defaultText\">\r\n</app-optimized-results-table>\r\n<div class=\"col-12\">\r\n    <button type=\"button\" \r\n            class=\"btn btn-dark m-2\" \r\n            (click)=\"placeOrderSelected()\" \r\n            [hidden]=\"!allowUserToPlaceOrderOrGetRecipe\"\r\n            disabled>Place order</button>\r\n    <button type=\"button\" \r\n            class=\"btn btn-dark m-2\" \r\n            (click)=\"getRecipeSelected()\" \r\n            [hidden]=\"!allowUserToPlaceOrderOrGetRecipe\">Get recipe</button>\r\n</div>        \r\n<router-outlet></router-outlet>","import { Injectable } from \"@angular/core\";\r\nimport { IDBPDatabase, openDB } from \"idb\";\r\nimport { RequestDB } from \"./request-db\";\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class IndexedDBService {\r\n\r\n    private db : IDBPDatabase<RequestDB>;\r\n    private dbName = 'request-db';\r\n\r\n    constructor() {\r\n        this.connectToDB();\r\n    }\r\n\r\n    async connectToDB() {\r\n        this.db = await openDB<RequestDB>(this.dbName, 1, {\r\n            upgrade(db) {\r\n                db.createObjectStore('failed-request-store');\r\n            }\r\n        });\r\n    }\r\n\r\n    //Called inside ConnectionLossInterceptor\r\n    addFailedRequest(failedRequest:any, tag : string) {\r\n        return this.db.put('failed-request-store', failedRequest, tag);\r\n    }\r\n\r\n    deleteRequest(tag : string) {\r\n        return this.db.delete('failed-request-store', tag);\r\n    }\r\n\r\n    async getAllEntries() : Promise<Map<string, any>> {\r\n        let entries : Map<string, any> = new Map();\r\n        let error : any;\r\n        let request = this.db.transaction(['failed-request-store'], 'readonly')\r\n                             .objectStore('failed-request-store')\r\n                             .openCursor();\r\n        await request.then((event) => {\r\n            if (event) {\r\n                let key = event.primaryKey;\r\n                let value = event.value;\r\n                entries.set(key, value);\r\n                event.continue();\r\n            }})\r\n        .catch((err) => error = err );        \r\n        \r\n        return new Promise((resolve, reject) => {\r\n            resolve(entries);\r\n            reject(error);\r\n        });\r\n    }\r\n}","import { BrowserModule } from '@angular/platform-browser';\r\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { JwtHelperService, JWT_OPTIONS  } from '@auth0/angular-jwt';\r\n\r\nimport * as fromApp from '../app/store/reducers/app.reducer';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { FullscreenOverlayContainer, OverlayContainer, OverlayModule } from \"@angular/cdk/overlay\";\r\nimport { UserPreferencesEffects } from './meal-planner/meal-optimizer/store/effects/user-preferences.effects';\r\nimport { MenuEffects } from '../app/meal-planner/meal-optimizer/store/effects/menu.effects';\r\nimport { OrderEffects } from '../app/meal-planner/meal-optimizer/store/effects/order.effects';\r\nimport { RecipesEffects } from '../app/meal-planner/recipes/store/effects/recipes.effects';\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { AppInfoModule } from '../app/app-info/app-info.module';\r\nimport { MealPlannerModule } from '../app/meal-planner/meal-planner.module';\r\nimport { UserMgmtModule } from '../app/user-mgmt/user-mgmt.module';\r\nimport { CoreModule } from '../app/shared/core/core.module';\r\nimport { interceptorProviders } from '../app/shared/services/interceptor/interceptors';\r\nimport { KeycloakAngularModule, KeycloakService } from 'keycloak-angular';\r\n\r\nimport { initializeKeycloak } from '../app/shared/app.init';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HeaderComponent\r\n  ],\r\n  imports: [\r\n    AppInfoModule,\r\n    CoreModule,\r\n    MealPlannerModule,\r\n    UserMgmtModule,\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    OverlayModule,\r\n    KeycloakAngularModule,\r\n    StoreModule.forRoot(fromApp.appReducer),\r\n    EffectsModule.forRoot([UserPreferencesEffects, MenuEffects, OrderEffects, RecipesEffects])    \r\n  ],\r\n  providers: [ interceptorProviders,\r\n              { provide : JWT_OPTIONS, useValue : JWT_OPTIONS },\r\n              JwtHelperService,\r\n              {provide: OverlayContainer, useClass: FullscreenOverlayContainer},\r\n              {provide: APP_INITIALIZER, useFactory: initializeKeycloak, multi: true, deps: [KeycloakService]}\r\n            ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\n\r\nimport { AuthGuardService } from '../shared/services/auth-guard.service';\r\nimport { UserRedirectComponent } from '../user-mgmt/user-redirect/user-redirect.component';\r\n\r\nconst userMgmtRoutes : Routes = [\r\n        { path: 'meal-planner/user-redirect', canActivate: [AuthGuardService], component: UserRedirectComponent \r\n    }];\r\n    \r\n    @NgModule({\r\n        imports: [RouterModule.forChild(userMgmtRoutes)],\r\n        exports: [RouterModule]\r\n    })\r\n    export class UserMgmtRoutingModule {}","import { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport * as MenuActions from '../actions/menu.actions';\r\n\r\nexport interface Menu {\r\n    itemList : Array<String>,\r\n    error : String,\r\n    requestStatus : HttpRequestStatus\r\n}\r\n\r\nconst defaultMenu : Menu = { itemList : null, error : null, requestStatus : HttpRequestStatus.NO_ACTION }\r\n\r\nexport function menuReducer(state : Menu = defaultMenu, action : MenuActions.MenuActions) {\r\n    switch( action.type ) {\r\n\r\n        case MenuActions.UPDATE_MENU_SUCCESS:\r\n            return { ...state, itemList: action.payload, error : null, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED };\r\n\r\n        case MenuActions.UPDATE_MENU_FAIL:\r\n            return { ...state, itemList : null, error: action.payload, requestStatus : HttpRequestStatus.RESPONSE_RECEIVED }; \r\n            \r\n        case MenuActions.CLEAR_MENU:\r\n            return defaultMenu;\r\n\r\n        case MenuActions.UPDATE_REQUEST_STATUS:\r\n            return { ...state, requestStatus : action.payload };\r\n\r\n        default: return state;\r\n    }\r\n}","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewChild, Renderer2 } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport * as UserPreferencesActions from '../../store/actions/user-preferences.actions';\r\n\r\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\r\n\r\n@Component({\r\n  selector: 'app-optimized-results-table',\r\n  templateUrl: './optimized-results-table.component.html',\r\n  styleUrls: ['./optimized-results-table.component.css']\r\n})\r\n/*\r\n * This component has 3 sections (tabs):\r\n * OrderInfo : Displays the user inputs\r\n * Optimized by Cost : Displays Item name, portion and cost for meal plan optimized by Cost\r\n * Optimized by Quality : Displays Item name, portion and cost for meal plan optimized by Quality\r\n * \r\n * Tasks:\r\n * (1) Setup structure of the tabs\r\n * (2) Pass item info to the tabs optimized by Cost and optimized by Quality\r\n *     Technique used: attribute binding\r\n * (3) Update User Preferences with the name of the tab selected - this value is stored as optimizationTypeSelected.\r\n * (4) Disable tabs if the isOptimizationFeasible = false\r\n */\r\nexport class OptimizedResultsTableComponent implements OnInit, OnDestroy {\r\n\r\n  @Input() costOptimizedPlan; \r\n  \r\n  @Input() qualityOptimizedPlan;\r\n\r\n  @Input() isOptimizationFeasible;\r\n\r\n  @Input() defaultText;\r\n  \r\n  @ViewChild('optimizationResultsTab') optimizationResultsTab : ElementRef;\r\n\r\n  constructor(private store : Store<AppState>,\r\n              private breakpointObserver: BreakpointObserver,\r\n              private renderer: Renderer2) { }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  ngAfterViewInit() {\r\n              //Track the size of the window and stack tabs for sizes < large\r\n              this.breakpointObserver.observe([\r\n                Breakpoints.XSmall,\r\n                Breakpoints.Small,\r\n                Breakpoints.Medium,\r\n                Breakpoints.Large,\r\n                Breakpoints.XLarge\r\n              ]).subscribe( (state: BreakpointState) => {\r\n                if (state.breakpoints[Breakpoints.XSmall] || \r\n                    state.breakpoints[Breakpoints.Small]) {\r\n                      this.renderer.addClass(this.optimizationResultsTab.nativeElement as HTMLElement,'flex-column');\r\n                }\r\n                else if (state.breakpoints[Breakpoints.Medium] ||\r\n                         state.breakpoints[Breakpoints.Large] || \r\n                         state.breakpoints[Breakpoints.XLarge]) {\r\n                      this.renderer.removeClass(this.optimizationResultsTab.nativeElement as HTMLElement,'flex-column');\r\n                }\r\n              });\r\n  }\r\n\r\n  /*\r\n   * Once a tab is selected, update user preferences (stored as optimizationTypeSelected)\r\n   */\r\n  onTabSelected(tabSelected : String) {\r\n    this.store.dispatch(new UserPreferencesActions.OptimizationTypeSelected(tabSelected));\r\n  }\r\n\r\n  ngOnDestroy() : void {}\r\n}","  <!-- Nav tabs -->\r\n<div class=\"w-80 ml-4 border\">\r\n    <ul class=\"nav nav-tabs\" #optimizationResultsTab>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link active\" \r\n           data-toggle=\"tab\" \r\n           href=\"#orderInfo\" \r\n           (click)=\"onTabSelected('orderInfo')\"> User's Choice </a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" \r\n           data-toggle=\"tab\" \r\n           href=\"#optimizedByCost\" \r\n           (click)=\"onTabSelected('optimizedByCost')\" \r\n           [class.disabled]=\"!isOptimizationFeasible\">Optimized by Cost</a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" \r\n        data-toggle=\"tab\" \r\n        href=\"#optimizedByQuality\" \r\n        (click)=\"onTabSelected('optimizedByQuality')\" \r\n        [class.disabled]=\"!isOptimizationFeasible\"> Optimized by Quality</a>\r\n      </li>\r\n    </ul>\r\n  \r\n    <!-- Tab panes -->\r\n  `   <div class=\"tab-content\">\r\n      <div id=\"orderInfo\" class=\"tab-pane active\">\r\n        <app-order-info></app-order-info>\r\n      </div>\r\n      <div id=\"optimizedByCost\" class=\"tab-pane\">\r\n        <div *ngIf=\"!costOptimizedPlan else costOptimizedResult\" class=\"row-fixed-height mx-5 mt-2\">\r\n          <h3>Meal Plan - Optimized by Cost</h3>\r\n          <p>{{ defaultText }}</p>\r\n        </div>  \r\n          <ng-template #costOptimizedResult>\r\n            <app-optimized-result-cost\r\n              [costOptimizedPlan]=\"costOptimizedPlan\">\r\n            </app-optimized-result-cost>\r\n        </ng-template>\r\n      </div>\r\n      <div id=\"optimizedByQuality\" class=\"tab-pane\">\r\n        <div *ngIf=\"!qualityOptimizedPlan else qualityOptimizedResult\" class=\"row-fixed-height mx-5 mt-2\">\r\n          <h3>Meal Plan - Optimized by Quality</h3>\r\n          <p>{{ defaultText }}</p>\r\n        </div>  \r\n          <ng-template #qualityOptimizedResult>\r\n            <app-optimized-result-quality  \r\n              [qualityOptimizedPlan]=\"qualityOptimizedPlan\">\r\n            </app-optimized-result-quality>\r\n          </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>      ","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UserMgmtRoutingModule } from '../user-mgmt/user-mgmt-routing.module';\r\nimport { CoreModule } from '../shared/core/core.module';\r\nimport { UserRedirectComponent } from './user-redirect/user-redirect.component';\r\n\r\n@NgModule({\r\n  declarations: [UserRedirectComponent],\r\n  imports: [\r\n    CommonModule,\r\n    CoreModule,\r\n    UserMgmtRoutingModule\r\n  ]\r\n})\r\nexport class UserMgmtModule { }\r\n","import { Action } from '@ngrx/store';\r\n\r\nimport { ShoppingItem } from '../../../shared/model/shopping-item-model';\r\n\r\nexport const ADD_INGREDIENT = 'ADD_INGREDIENT';\r\nexport const ADD_INGREDIENTS = 'ADD_INGREDIENTS';\r\nexport const UPDATE_INGREDIENT = 'UPDATE_INGREDIENT';\r\nexport const DELETE_INGREDIENT = 'DELETE_INGREDIENT';\r\nexport const START_EDIT = 'START_EDIT';\r\nexport const STOP_EDIT = 'STOP_EDIT';\r\nexport const CLEAR_SHOPPING_LIST = 'CLEAR_SHOPPING_LIST';\r\n\r\nexport class AddIngredient implements Action {\r\n  readonly type = ADD_INGREDIENT;\r\n\r\n  constructor(public payload: ShoppingItem) {}\r\n}\r\n\r\nexport class AddIngredients implements Action {\r\n  readonly type = ADD_INGREDIENTS;\r\n\r\n  constructor(public payload: ShoppingItem[]) {}\r\n}\r\n\r\nexport class UpdateIngredient implements Action {\r\n  readonly type = UPDATE_INGREDIENT;\r\n\r\n  constructor(public payload: { shoppingItem : ShoppingItem, itemNameUpdated : boolean} ) {}\r\n}\r\n\r\nexport class DeleteIngredient implements Action {\r\n  readonly type = DELETE_INGREDIENT;\r\n}\r\n\r\nexport class StartEdit implements Action {\r\n  readonly type = START_EDIT;\r\n\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class StopEdit implements Action {\r\n  readonly type = STOP_EDIT;\r\n}\r\n\r\nexport class ClearShoppingList implements Action {\r\n  readonly type = CLEAR_SHOPPING_LIST;\r\n}\r\n\r\nexport type ShoppingListActions =\r\n  | AddIngredient\r\n  | AddIngredients\r\n  | UpdateIngredient\r\n  | DeleteIngredient\r\n  | StartEdit\r\n  | StopEdit\r\n  | ClearShoppingList;\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-contact-us',\r\n  templateUrl: './contact-us.component.html',\r\n  styleUrls: ['./contact-us.component.css']\r\n})\r\nexport class ContactUsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h4 class=\"justify-content-start my-4 ml-1\">Contact us</h4>\r\n<div class=\"mt-1 ml-1 border col-md-10 col-xs-12\">\r\n    <div class=\"m-3\">\r\n        <p>We want it all - We want a booming business, we want raving fans, we want to hear from you.</p>\r\n        <p>Reach out to us, whether its for appreciation, criticism or even a rant!</p>\r\n        <form class=\"mt-4\">\r\n            <label for=\"name\" class=\"font-weight-bold\">Name (optional)</label>\r\n            <input class=\"form-control w-100\" type=\"text\" id=\"name\" name=\"name\" placeholder=\"Enter your name here (optional)\">\r\n            <label for=\"comments\" class=\"font-weight-bold\">Your comments</label>\r\n            <textarea class=\"form-control mb-2 w-100\" rows=\"4\" type=\"text\" id=\"comments\" name=\"comments\" placeholder=\"Enter your comments here\"></textarea>\r\n            <input class=\"mt-4\" type=\"submit\" value=\"Send\">\r\n        </form>\r\n    </div>\r\n</div>","import { Action } from '@ngrx/store';\r\n\r\nimport { OptimizationMode } from '../../../shared/optimization-mode.enum';\r\nimport { ShoppingListMode } from '../../../shared/shopping-list-mode.enum';\r\n/* \r\n * This file deals with which sections of the meal planner must be displayed/hidden. \r\n * Switching between modes is also covered.\r\n */\r\n\r\nexport const UPDATE_OPTIMIZATION_MODE = '[User display prefs] UPDATE_OPTIMIZATION_MODE';\r\nexport const SHOW_RECIPES = '[User display prefs] SHOW_RECIPES';\r\nexport const HIDE_RECIPES = '[User display prefs] HIDE_RECIPES';\r\nexport const SHOW_RECIPE_DETAIL = '[User display prefs] SHOW_RECIPE_DETAIL';\r\nexport const SHOW_SHOPPING_LIST = '[User display prefs] SHOW_SHOPPING_LIST';\r\nexport const HIDE_SHOPPING_LIST = '[User display prefs] HIDE_SHOPPING_LIST';\r\nexport const UPDATE_SHOPPING_LIST_MODE = '[User display prefs] UPDATE_SHOPPING_LIST_MODE';\r\nexport const RESET_USER_DISPLAY_PREFERENCES = '[User display prefs] RESET_USER_DISPLAY_PREFERENCES';\r\n\r\nexport class UpdateOptimizationMode implements Action {\r\n    readonly type = UPDATE_OPTIMIZATION_MODE;\r\n    constructor(public payload  : OptimizationMode) {}\r\n}\r\n\r\nexport class ShowRecipes implements Action {\r\n    readonly type = SHOW_RECIPES;\r\n}\r\n\r\nexport class HideRecipes implements Action {\r\n    readonly type = HIDE_RECIPES;\r\n}\r\n\r\nexport class ShowRecipeDetail implements Action {\r\n    readonly type = SHOW_RECIPE_DETAIL;\r\n    constructor(public payload  : { id:number, name: String}) {}\r\n}\r\n\r\nexport class ShowShoppingList implements Action {\r\n    readonly type = SHOW_SHOPPING_LIST;\r\n}\r\n\r\nexport class HideShoppingList implements Action {\r\n    readonly type = HIDE_SHOPPING_LIST;\r\n}\r\n\r\nexport class UpdateShoppingListMode implements Action {\r\n    readonly type = UPDATE_SHOPPING_LIST_MODE;\r\n    constructor(public payload  : ShoppingListMode) {}\r\n}\r\n\r\nexport class ResetUserDisplayPreferences implements Action {\r\n    readonly type = RESET_USER_DISPLAY_PREFERENCES;\r\n}\r\n\r\nexport type UserDisplayPreferencesActions = UpdateOptimizationMode \r\n                                | ShowRecipes \r\n                                | HideRecipes\r\n                                | ShowRecipeDetail\r\n                                | ShowShoppingList\r\n                                | HideShoppingList\r\n                                | UpdateShoppingListMode\r\n                                | ResetUserDisplayPreferences;","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport * as MenuActions from '../../meal-planner/meal-optimizer/store/actions/menu.actions';\r\nimport * as OrderActions from '../../meal-planner/meal-optimizer/store/actions/order.actions';\r\nimport * as RecipeActions from '../../meal-planner/recipes/store/actions/recipes.actions';\r\nimport { HttpRequestStatus } from '../http-request-status.enum';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class ActionDispatcher {\r\n\r\n    constructor(private store : Store<AppState>) {}\r\n\r\n    public dispatchAction(request : any, tag : String) : void {\r\n                \r\n        //Logic to dispatch action based on tag\r\n        switch(tag) {\r\n            /*\r\n             * NOTE: Logic for tag 'categories-fetch' is not included since this request is never stored in failed request db.\r\n             * The meal-planner/meal-optimizer page is loaded only if the connection is available.\r\n            */\r\n            case 'menu-find' : {                \r\n                                    let dietType : String = request.params.map.get('category').toString();\r\n                                    this.store.dispatch(new MenuActions.UpdateMenuStart(dietType));\r\n                                    break;\r\n                               }\r\n            case 'orders-user' :\r\n            case 'orders-guest':     \r\n                                {\r\n                                    this.store.dispatch(new OrderActions.UpdateRequestStatus(HttpRequestStatus.REQUEST_SENT));\r\n                                    let orderRequest = request.body;\r\n                                    this.store.dispatch(new OrderActions.SaveOrderStart(orderRequest));\r\n                                    break;\r\n                                 }                   \r\n            case 'recipe-find' : {\r\n                                    let itemNames : Array<String> = request.params.map.get('names');\r\n                                    this.store.dispatch(new RecipeActions.FetchRecipesStart(itemNames));\r\n                                    break;\r\n                                 }                \r\n        }\r\n        return;\r\n    }    \r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../shared/model/user.model';\r\nimport { AppState } from '../store/reducers/app.reducer';\r\nimport { Store } from '@ngrx/store';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\nimport * as UserMgmtActions from 'src/app/user-mgmt/store/actions/user-mgmt.actions';\r\nimport { KeycloakService } from 'keycloak-angular';\r\nimport { environment } from '../../environments/environment';\r\n\r\n@Component({\r\n    selector: 'app-header',\r\n    templateUrl: './header.component.html',\r\n    styleUrls: ['./header.component.css']    \r\n})\r\nexport class HeaderComponent implements OnInit {\r\n    \r\n    authenticatedUser : User;\r\n\r\n    constructor(private store : Store<AppState>, \r\n                private router: Router, \r\n                private keyCloakService : KeycloakService) {}\r\n\r\n    ngOnInit(){\r\n        this.store.select('authenticatedUser').subscribe((authenticatedUser : AuthenticatedUser) => {\r\n            if(!authenticatedUser.error) this.authenticatedUser = authenticatedUser.user;\r\n        });\r\n    }\r\n\r\n    viewMealPlanner() : void {\r\n        this.router.navigate(['/meal-optimizer'], { queryParams: {mode: 'create'} });\r\n    }\r\n\r\n    logout() : void {\r\n\r\n        //Clear User state\r\n        this.store.dispatch(new UserMgmtActions.Logout());\r\n        \r\n        //Logout of Keycloak\r\n        this.keyCloakService.logout(`${environment.apiUrl}:${environment.apiPort}/`);\r\n    }\r\n}","<nav class=\"navbar navbar-expand-lg navbar-light al-navbar fixed-top\">\r\n  <a class=\"navbar-brand\" href=\"#\">MEAL OPTIMIZER</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#primaryNav\" aria-controls=\"primaryNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n  <div class=\"collapse navbar-collapse\" id=\"primaryNav\">\r\n      <ul class=\"navbar-nav ml-auto\">\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" routerLink=\"/app-info/home\">Home</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" routerLink=\"/app-info/contact-us\">Contact us</a>\r\n          </li>\r\n          <li class=\"nav-item active\">\r\n              <a class=\"nav-link\" routerLink=\"/meal-planner/user-redirect\" [hidden] = \"authenticatedUser.loggedIn\">Register/Login</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a class=\"nav-link\" routerLink=\"/meal-planner\">Meal Planner</a>\r\n          </li>\r\n          <li class=\"nav-item\">\r\n              <a *ngIf=\"authenticatedUser.loggedIn; else loggedOut\" class=\"nav-link\" (click)=\"logout()\">Logout</a>\r\n              <ng-template #loggedOut>\r\n                  <a routerLink=\"/meal-planner/user-redirect\" class=\"nav-link\">Guest</a>\r\n              </ng-template>    \r\n          </li>\r\n      </ul>\r\n  </div>\r\n</nav>","import * as UserDisplayPreferencesActions from \"../actions/user-display-preferences.actions\";\r\n\r\nimport { OptimizationMode } from '../../../shared/optimization-mode.enum';\r\nimport { ShoppingListMode } from '../../../shared/shopping-list-mode.enum';\r\n\r\nexport interface UserDisplayPreferences {\r\n    optimizationMode: String,\r\n    showRecipes : boolean,\r\n    recipeSelected : { id:number, name: String},\r\n    showShoppingList : boolean,\r\n    shoppingListMode : String\r\n}\r\n\r\nconst defaultPrefs : UserDisplayPreferences = {\r\n    optimizationMode: OptimizationMode.CREATE,\r\n    showRecipes : false,\r\n    recipeSelected : null,\r\n    showShoppingList : false,\r\n    shoppingListMode : ShoppingListMode.ADD\r\n}\r\n\r\nexport function userDisplayPreferencesReducer(state : UserDisplayPreferences = defaultPrefs, action : UserDisplayPreferencesActions.UserDisplayPreferencesActions) : UserDisplayPreferences {\r\n    \r\n    switch(action.type) {\r\n        \r\n        case UserDisplayPreferencesActions.UPDATE_OPTIMIZATION_MODE :\r\n            return { ...state, optimizationMode : action.payload, recipeSelected : null };\r\n        \r\n        case UserDisplayPreferencesActions.SHOW_RECIPES :\r\n            return { ...state, showRecipes : true, recipeSelected : null };        \r\n\r\n        case UserDisplayPreferencesActions.HIDE_RECIPES :\r\n            return { ...state, showRecipes : false, recipeSelected : null };              \r\n        \r\n        case UserDisplayPreferencesActions.SHOW_RECIPE_DETAIL :\r\n            return { ...state, showRecipes : true, recipeSelected : action.payload };\r\n\r\n        case UserDisplayPreferencesActions.SHOW_SHOPPING_LIST :\r\n            return { ...state, showShoppingList : true };        \r\n    \r\n        case UserDisplayPreferencesActions.HIDE_SHOPPING_LIST :\r\n            return { ...state, showShoppingList : false }; \r\n\r\n        case UserDisplayPreferencesActions.UPDATE_SHOPPING_LIST_MODE :\r\n            return { ...state, shoppingListMode : action.payload };\r\n\r\n        case UserDisplayPreferencesActions.RESET_USER_DISPLAY_PREFERENCES :\r\n            return defaultPrefs;\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { Meal, MealPlan } from '../model/order-response.model';\r\nimport { OrderResponse } from '../model/order-response.model';\r\n\r\nimport { OptimizationTypeMapping, OptimizationSelectionMapping } from '../optimization-mapping.enum';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class OptimizationService {\r\n\r\n    constructor() { }\r\n\r\n    optimizedMealPlans : OrderResponse;\r\n\r\n    getMealPlanByOptimizationType(optimizationType : String, optimizedMealPlans : OrderResponse) : { mealList : Meal[], planCost: number, optimizationType : String } {\r\n        \r\n        this.optimizedMealPlans = optimizedMealPlans;\r\n\r\n        let mealPlanOptimizedByType : { mealList : Meal[], planCost: number, optimizationType : String };\r\n\r\n        optimizedMealPlans.mealPlan.forEach((mealPlan : MealPlan) => {\r\n            if(optimizationType === OptimizationTypeMapping[mealPlan.optimizationType.toString()]) {\r\n                mealPlanOptimizedByType = { mealList : mealPlan.meals, planCost: mealPlan.mealPlanCost, optimizationType : optimizationType };\r\n            }\r\n        });\r\n        return mealPlanOptimizedByType;\r\n    }\r\n\r\n    getPortionCountByOptimizationTypeMealName(optimizationType:String, mealName : String) : number {\r\n        var portionCount = 0;\r\n \r\n        this.optimizedMealPlans.mealPlan.forEach((mealPlan : MealPlan) => {\r\n            if(optimizationType === OptimizationSelectionMapping[mealPlan.optimizationType.toString()]) {\r\n                mealPlan.meals.forEach((meal : Meal) => {\r\n                    if(mealName.toLowerCase() === meal.itemName.toLowerCase()) portionCount = meal.portion;\r\n                });\r\n            }\r\n        });\r\n        return portionCount;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\n\r\nimport { ErrorHandler } from './error-handler';\r\nimport { OverlayDisplayService } from '../overlay-display.service';\r\nimport { ConnectionStatusHandlerService } from '../connection-status-handler.service';\r\n\r\n@Injectable({ providedIn : 'root' })\r\n//Handles server(HTTP call) and client errors. Called from inside ErrorInterceptor.\r\nexport class AppErrorHandler extends ErrorHandler {\r\n\r\n    constructor(private overlayDisplayService : OverlayDisplayService,\r\n                private connectionStatusHandlerService : ConnectionStatusHandlerService) {\r\n                    super();\r\n                }\r\n\r\n    public handleError(status? : number) : String {\r\n        //Display the below error only is the connection is available.\r\n        if(this.connectionStatusHandlerService.getConnectionStatus()) {\r\n            if((status === undefined) || //Incase of ErrorEvent - client errors\r\n               (status !== undefined && (status === 0 || status === 404))) { //Incase of HttpErrorResponse - Server errors from backend\r\n                this.overlayDisplayService.showOverlay(\r\n                    'There was an error. This was not supposed to happen. We\\'re sorry.. Our engineers are hard at work fixing your problem. We will notify you as soon as we have a fix.');\r\n            }            \r\n        }\r\n        return super.handleError();\r\n    }\r\n}\r\n/*\r\n * If connection is available and the status === 0, display overlay since it is an error in app setup.\r\n * If connection is not available and status === 0, it means network connection is not available, do not display overlay.\r\n */","import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\n\r\nimport { BaseResponseHandler } from \"./base-response-handler\";\r\nimport * as RecipeActions from '../../../meal-planner/recipes/store/actions/recipes.actions';\r\nimport { Recipe } from '../../model/recipe.model';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class RecipeResponseHandler implements BaseResponseHandler{\r\n\r\n    constructor() {}\r\n\r\n    handleSuccess(recipes : Recipe[]) {      \r\n        return new RecipeActions.FetchRecipesSuccess(recipes);\r\n    }\r\n    handleFailure(errorResponse: any) {\r\n        return of(new RecipeActions.FetchRecipesFail(\r\n            errorResponse));\r\n    }\r\n}","export class ShoppingItem {\r\n    constructor(public name : String, public amount : number, public measure : String, public labels : Array<String>) { }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Effect } from '@ngrx/effects';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport * as UserPreferencesActions from '../actions/user-preferences.actions';\r\nimport * as MenuActions from '../actions/menu.actions';\r\n\r\n@Injectable()\r\nexport class UserPreferencesEffects {\r\n\r\n  constructor(private actions$ : Actions) { }\r\n\r\n  @Effect()\r\n  dietTypeChanged = this.actions$.pipe(\r\n      ofType<UserPreferencesActions.EditDietType>(UserPreferencesActions.EDIT_DIET_TYPE),\r\n      map((editDietTypeAction : UserPreferencesActions.EditDietType) => {\r\n        let dietType = editDietTypeAction.payload;\r\n        return new MenuActions.UpdateMenuStart(dietType);\r\n      }));\r\n    }","export class User {\r\n    public username: String;    \r\n    public firstName : String;\r\n    public lastName : String;\r\n    public email : String; \r\n    public preferredDietType? : String;\r\n    public address? : String;\r\n    public nutrientMinLimits? : Array<{String, number}>;\r\n    public nutrientMaxLimits? : Array<{String, number}>;\r\n    public token : String;\r\n    public loggedIn: Boolean = false;\r\n\r\n    constructor(username:String, firstName?:String, lastName?:String, email?:String, token? : String, loggedIn?: Boolean, preferredDietType?:String, address?:String, nutrientMinLimits? : Array<{String, number}>, nutrientMaxLimits? : Array<{String, number}>) {\r\n        this.username = username;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.email = email;\r\n        this.preferredDietType = preferredDietType;\r\n        this.address = address;\r\n        this.nutrientMaxLimits = nutrientMaxLimits;\r\n        this.nutrientMinLimits = nutrientMinLimits;\r\n        this.token = token;\r\n        this.loggedIn = loggedIn;\r\n    }\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\n\r\nimport { CONTAINER_DATA } from '../../services/display.service';\r\nimport { OverlayDisplayService } from '../../services/overlay-display.service';\r\n\r\n@Component({\r\n  selector: 'app-custom-overlay',\r\n  templateUrl: './custom-overlay.component.html',\r\n  styleUrls: ['./custom-overlay.component.css']\r\n})\r\nexport class CustomOverlayComponent implements OnInit {\r\n\r\n  message : String;\r\n\r\n  constructor(private overlayDisplayService : OverlayDisplayService,\r\n              @Inject(CONTAINER_DATA) message) {\r\n                this.message = message;                \r\n               }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public hideOverlayDisplay() {\r\n    this.overlayDisplayService.hideOverlay();\r\n  }\r\n}","<div class=\"overlay\">\r\n    <div class=\"grey\">\r\n        <p class=\"white\">{{ message }}</p>\r\n        <button (click)=\"hideOverlayDisplay()\">Ok</button>\r\n    </div>\r\n</div>","import { User } from \"../../../shared/model/user.model\";\r\nimport { UserBuilder } from '../../../shared/model/user-builder.model';\r\nimport * as UserMgmtActions from '../actions/user-mgmt.actions';\r\n\r\nexport interface AuthenticatedUser {\r\n    user : User,\r\n    error : String\r\n}\r\n\r\nconst defaultUser : AuthenticatedUser = {\r\n    user : new UserBuilder('guest').setLoggedIn(false).build(),\r\n    error : null\r\n};\r\n\r\nexport function userMgmtReducer(state : AuthenticatedUser = defaultUser, action : UserMgmtActions.UserMgmtActions) : AuthenticatedUser {\r\n    \r\n    switch(action.type) {\r\n        \r\n        case UserMgmtActions.LOGIN_SUCCESS :\r\n            return { ...state, user : action.payload, error : null };\r\n        \r\n        case UserMgmtActions.LOGIN_ERROR:\r\n            return { ...state, user : null, error : action.payload };\r\n\r\n        case UserMgmtActions.LOGOUT:\r\n            return { ...state, \r\n                     user : new UserBuilder('guest').setLoggedIn(false).build(), \r\n                     error : null};\r\n\r\n        default : \r\n            return state;\r\n    }\r\n}","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { MealOptimizerComponent } from './meal-optimizer/meal-optimizer.component';\r\nimport { CanExitPageService } from '../shared/services/can-exit-page.service';\r\nimport { UseDietTypeResolver } from '../shared/services/user-diet-type-resolver.service';\r\nimport { RecipesComponent } from './recipes/recipes.component';\r\nimport { RecipeDetailComponent } from './recipes/recipe-detail/recipe-detail.component';\r\nimport { OnlineOrderComponent } from './meal-optimizer/online-order/online-order.component';\r\nimport { AuthGuardService } from '../shared/services/auth-guard.service';\r\nimport { MealPlannerComponent } from './meal-planner.component';\r\nimport { ShoppingListComponent } from './shopping-list/shopping-list.component';\r\n\r\nconst mealPlannerRoutes : Routes = [\r\n    {path:'meal-planner', component: MealPlannerComponent, canDeactivate: [CanExitPageService], resolve:{userDietTypes: UseDietTypeResolver}}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(mealPlannerRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class MealPlannerRoutingModule {}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { switchMap, map, catchError } from 'rxjs/operators';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { OrderResponseHandler } from '../../../../shared/services/response-handler/order-response-handler';\r\nimport { OrderResponse } from '../../../../shared/model/order-response.model';\r\nimport * as OrderActions from '../actions/order.actions';\r\nimport { User } from 'src/app/shared/model/user.model';\r\n\r\nimport { environment } from '../../../../../environments/environment';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\n\r\n@Injectable()\r\nexport class OrderEffects {\r\n\r\n    /*\r\n     * Read the authenticatedUser info from store to check login status.\r\n     * The backend url changes based on the login status.\r\n     */\r\n    authenticatedUser : User;\r\n    url : string;\r\n\r\n    constructor(private http : HttpClient, \r\n                private actions$ : Actions,\r\n                private orderResponseHandler : OrderResponseHandler,\r\n                private store : Store<AppState>) {\r\n        this.store.select('authenticatedUser').subscribe((authenticatedUser : AuthenticatedUser) => {\r\n                    this.authenticatedUser = authenticatedUser.user;\r\n                    });            \r\n                }\r\n\r\n@Effect()\r\nplaceOrder = this.actions$.pipe(\r\n    ofType<OrderActions.SaveOrderStart>(OrderActions.SAVE_ORDER_START),\r\n    switchMap((createOrderAction : OrderActions.SaveOrderStart) => {\r\n        /* \r\n         * If the user is logged in, the url to get meal plan is `${environment.hostUrl}/${environment.applicationName}/orders/user/save`\r\n         * If the user is not logged in (user is guest), the url to get meal plan is `${environment.hostUrl}/${environment.applicationName}/orders/guest/compute`\r\n         */\r\n        if(this.authenticatedUser.loggedIn) {\r\n            this.url = `${environment.hostUrl}/${environment.applicationName}/orders/user/save`;\r\n        }\r\n        else {\r\n            this.url = `${environment.hostUrl}/${environment.applicationName}/orders/guest/compute`;\r\n        }\r\n\r\n        return this.http.post<OrderResponse>(this.url,\r\n                createOrderAction.payload).pipe(\r\n                    map((optimizedMealPlans : OrderResponse) => {\r\n                        return this.orderResponseHandler.handleSuccess(optimizedMealPlans);\r\n                    }),\r\n                    catchError((errorRes : any) => {\r\n                        return this.orderResponseHandler.handleFailure(errorRes);\r\n                    })\r\n                )\r\n    })\r\n);\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { Nutrient } from \"../model/nutrient.model\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserBuilder } from \"../model/user-builder.model\";\r\nimport { KeycloakService } from \"keycloak-angular\";\r\nimport { User } from \"../model/user.model\";\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class UserService {\r\n \r\n    constructor(private http : HttpClient, \r\n                private keycloakService : KeycloakService) {}\r\n\r\n    fetchAllUsernames() : Observable<Array<String>> {\r\n        const url = '/mealoptimizer/user/fetchAllUsernames';\r\n        return this.http.get<String[]>(url).pipe(\r\n            catchError((errorRes : any) => {\r\n                return throwError(errorRes.error.error + errorRes.error.message);\r\n            })\r\n        );\r\n    }\r\n\r\n    getDefaultNutrientLimits() : Nutrient[] {\r\n        const defaultNutrients = new Array<Nutrient>();\r\n        defaultNutrients.push(\r\n            new Nutrient('calories', 2000, 2400, 'cal'),\r\n            new Nutrient('carbs', 105, 500, 'g'),\r\n            new Nutrient('protein', 20, 200, 'g'),\r\n            new Nutrient('fat', 5, 80, 'g'),\r\n            new Nutrient('sodium', 30, 5000, 'mg'),\r\n            new Nutrient('calcium', 100, 5000, 'mg'));\r\n        return defaultNutrients;\r\n    }\r\n\r\n    // The nutrient min-max elements for each user is stored as { nutrientName, min, max }\r\n    // We split it into 2 separate objects - { nutrientName, min } and { nutrientName, max} to mae it easier to handle. \r\n    private parseNutrientLimits(limitInfo : { name: String, min:number, max:number}[]) :  { nutrientMinLimits : {}, nutrientMaxLimits: {}} {\r\n        let nutrientMinLimitMap = new Map<String, number>();\r\n        let nutrientMaxLimitMap = new Map<String, number>();\r\n        limitInfo.forEach((nutrient : { name:string, min:number, max:number }) => {\r\n            nutrientMinLimitMap.set(nutrient.name, nutrient.min);\r\n            nutrientMaxLimitMap.set(nutrient.name, nutrient.max);\r\n        });\r\n        //return { nutrientMinLimits : this.convertMapToObj(nutrientMinLimitMap), nutrientMaxLimits: this.convertMapToObj(nutrientMaxLimitMap)};\r\n        return { nutrientMinLimits : Object.fromEntries(nutrientMinLimitMap), nutrientMaxLimits: Object.fromEntries(nutrientMaxLimitMap)};\r\n    }\r\n\r\n    async parseAuthenticatedUserDetails() : Promise<User> {\r\n        let authenticatedUserBuilder : UserBuilder = new UserBuilder(this.keycloakService.getUsername());\r\n        let isLoggedIn = await this.keycloakService.isLoggedIn();\r\n        let token = await this.keycloakService.getToken();\r\n\r\n        authenticatedUserBuilder.setLoggedIn(isLoggedIn);\r\n        authenticatedUserBuilder.setToken(token);\r\n        \r\n        return authenticatedUserBuilder.build();\r\n    }\r\n\r\n    async parseUserProfile() : Promise<User> {\r\n        let userProfile = await this.keycloakService.loadUserProfile();\r\n        return new UserBuilder(userProfile.username)\r\n                        .setFirstName(userProfile.firstName)\r\n                        .setLastName(userProfile.lastName)\r\n                        .setEmail(userProfile.email)\r\n                        .build();\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { DefaultMessages } from 'src/app/shared/default-messages';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { Recipe } from 'src/app/shared/model/recipe.model';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { Recipes } from './store/reducers/recipes.reducer';\r\nimport { UserDisplayPreferences } from 'src/app/user-mgmt/store/reducers/user-display-preferences.reducer';\r\n\r\n@Component({\r\n  selector: 'app-recipes',\r\n  templateUrl: './recipes.component.html',\r\n  styleUrls: ['./recipes.component.css']\r\n})\r\n/*\r\n * This component has 2 sections :\r\n * RecipeList : List of recipes for the meals chosen. It is composed of 4 RecipeItems\r\n * RecipeStart : Displays a help text. This section is replaced with RecipeDetail as soon as a recipe is selected.\r\n * \r\n * Transition from RecipeStart -> RecipeDetail: When a RecipeItem is clicked, the route /meal-planner/recipes/recipeID is loaded.\r\n * RecipeStart is replaced with RecipeDetail for recipeID.\r\n */\r\nexport class RecipesComponent implements OnInit {\r\n\r\n  defaultText : String = DefaultMessages.recipe.get(HttpRequestStatus.NO_ACTION);\r\n  \r\n  recipes: Recipe[];\r\n\r\n  recipeSelected : boolean = false;\r\n\r\n  constructor(private store : Store<AppState>) {}\r\n\r\n  ngOnInit(): void {\r\n    \r\n    this.store.select('recipes').subscribe((recipes : Recipes) => {\r\n      \r\n      switch(recipes.requestStatus) {\r\n\r\n        case HttpRequestStatus.NO_ACTION : this.defaultText = DefaultMessages.recipe.get(HttpRequestStatus.NO_ACTION);\r\n                                           break;\r\n  \r\n        case HttpRequestStatus.REQUEST_SENT : this.defaultText = DefaultMessages.recipe.get(HttpRequestStatus.REQUEST_SENT);\r\n                                              break;\r\n                                           \r\n        case HttpRequestStatus.RESPONSE_RECEIVED : this.defaultText = DefaultMessages.recipe.get(HttpRequestStatus.RESPONSE_RECEIVED);\r\n                                                   if(!recipes.error) this.recipes = recipes.recipes; \r\n                                                   break;\r\n      }\r\n    });\r\n    \r\n    this.store.select('userDisplayPreferences').subscribe((userDisplayPreferences : UserDisplayPreferences) => {\r\n      this.recipeSelected = (userDisplayPreferences.recipeSelected !== null)?true:false;\r\n    });\r\n  }\r\n}","<div class=\"row mt-4 ml-1\">\r\n    <div class=\"col-md-11\">\r\n        <h4 style=\"text-align : center\"> {{ defaultText }}</h4>\r\n        <div *ngIf=\"recipes\">\r\n            <h4 class=\"row justify-content-start py-4\">Recipes</h4>\r\n            <div class=\"row recipes-custom-layout justify-content-between ml-4\">\r\n                <div class=\"col-xs-11 col-md-4 mb-4\">\r\n                    <app-recipe-list [recipes] = \"recipes\"></app-recipe-list>\r\n                </div>\r\n                <div class=\"col-xs-11 col-md-7\">\r\n                    <div *ngIf=\"!recipeSelected; else recipe_detail\">                    \r\n                            <app-recipe-start style=\"margin-top: 50px\"></app-recipe-start>\r\n                    </div>\r\n                </div>\r\n                    <ng-template #recipe_detail>\r\n                        <app-recipe-detail></app-recipe-detail>\r\n                    </ng-template>\r\n            </div>    \r\n        </div>\r\n    </div>\r\n</div>    ","import { Injectable } from '@angular/core';\r\nimport { of } from 'rxjs';\r\n\r\nimport { BaseResponseHandler } from \"./base-response-handler\";\r\nimport * as MenuActions from '../../../meal-planner/meal-optimizer/store/actions/menu.actions';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class MenuResponseHandler implements BaseResponseHandler {\r\n\r\n    constructor() {}\r\n\r\n    handleSuccess(menu: String[]) {      \r\n        return new MenuActions.UpdateMenuSuccess(menu);\r\n    }\r\n    handleFailure(errorResponse: any) {\r\n        return of(new MenuActions.UpdateMenuFail(\r\n            errorResponse));\r\n    }\r\n\r\n}","export class Nutrient {\r\n    constructor(public name : String, public min : number, public max : number, public unitOfMeasure : String) {}\r\n}","import { Action } from '@ngrx/store';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { Recipe } from '../../../../shared/model/recipe.model';\r\n\r\nexport const FETCH_RECIPES_START = '[Recipes] FETCH_RECIPES_START';\r\nexport const FETCH_RECIPES_SUCCESS = '[Recipes] FETCH_RECIPES_SUCCESS';\r\nexport const FETCH_RECIPES_FAIL = '[Recipes] FETCH_RECIPES_FAIL';\r\nexport const UPDATE_REQUEST_STATUS = '[Recipes] UPDATE_REQUEST_STATUS';\r\nexport const CLEAR_RECIPES = '[Recipes] CLEAR_RECIPES';\r\n\r\nexport class FetchRecipesStart implements Action {\r\n    readonly type = FETCH_RECIPES_START;\r\n    constructor(public payload : String[]) {}\r\n}\r\n\r\nexport class FetchRecipesSuccess implements Action {\r\n    readonly type = FETCH_RECIPES_SUCCESS;\r\n    constructor(public payload : Recipe[]) {}\r\n}\r\n\r\nexport class FetchRecipesFail implements Action {\r\n    readonly type = FETCH_RECIPES_FAIL;\r\n    constructor(public payload : String) {}\r\n}\r\n\r\nexport class UpdateRequestStatus implements Action {\r\n    readonly type = UPDATE_REQUEST_STATUS;\r\n    constructor(public payload : HttpRequestStatus) {}\r\n}\r\n\r\nexport class ClearRecipes implements Action {\r\n    readonly type = CLEAR_RECIPES;\r\n}\r\n\r\nexport type RecipesActions = FetchRecipesStart | FetchRecipesSuccess | FetchRecipesFail | UpdateRequestStatus | ClearRecipes;","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Action, Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { CanComponentDeactivate } from '../shared/services/can-exit-page.service';\r\nimport { IUserDietType } from '../shared/services/user-diet-type-resolver.service';\r\nimport { AppState } from '../store/reducers/app.reducer';\r\nimport { UserDisplayPreferences } from '../user-mgmt/store/reducers/user-display-preferences.reducer';\r\n\r\nimport * as UserPreferencesActions from './meal-optimizer/store/actions/user-preferences.actions';\r\nimport * as MenuActions from './meal-optimizer/store/actions/menu.actions'\r\nimport * as OrderActions from './meal-optimizer/store/actions/order.actions';\r\nimport * as RecipeActions from './recipes/store/actions/recipes.actions';\r\nimport * as ShoppingListActions from './shopping-list/store/shopping-list.actions';\r\nimport * as UserDisplayPreferencesActions from '../user-mgmt/store/actions/user-display-preferences.actions';\r\n\r\n@Component({\r\n  selector: 'app-meal-planner',\r\n  templateUrl: './meal-planner.component.html',\r\n  styleUrls: ['./meal-planner.component.css']\r\n})\r\nexport class MealPlannerComponent implements OnInit, CanComponentDeactivate {\r\n\r\n  showRecipes : boolean;\r\n  showShoppingList : boolean;\r\n  dietTypes : Array<IUserDietType>;\r\n\r\n  constructor(private route: ActivatedRoute, \r\n              private store : Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.route.data.subscribe(data => {\r\n      this.dietTypes = data['userDietTypes'];\r\n    });\r\n\r\n    this.store.select('userDisplayPreferences').subscribe((userDisplayPreferences : UserDisplayPreferences) => {\r\n      \r\n      this.showRecipes = userDisplayPreferences.showRecipes;\r\n      this.showShoppingList = userDisplayPreferences.showShoppingList;\r\n    });\r\n  }\r\n\r\n  canDeactivate() : Observable<boolean> | Promise<boolean> | boolean {\r\n    if(confirm('You are navigating away from the page. Your inputs will be reset.')) {\r\n      [new UserPreferencesActions.ClearUserPreferences(), \r\n        new MenuActions.ClearMenu(),\r\n        new OrderActions.ClearOrder(),\r\n        new RecipeActions.ClearRecipes(),\r\n        new ShoppingListActions.ClearShoppingList(),\r\n        new UserDisplayPreferencesActions.ResetUserDisplayPreferences()\r\n      ].forEach((action : Action) => {\r\n          this.store.dispatch(action);\r\n        });\r\n        return true;\r\n    }\r\n    else return false;\r\n  }\r\n}","<app-meal-optimizer [dietTypes]='dietTypes'></app-meal-optimizer>\r\n<app-recipes *ngIf=\"showRecipes\"></app-recipes>\r\n<app-shopping-list *ngIf=\"showShoppingList\"></app-shopping-list>","import { Injectable } from '@angular/core';\r\nimport {\r\n    HttpInterceptor,\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { exhaustMap, take } from 'rxjs/operators';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { Store } from '@ngrx/store';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n\r\n    constructor(private store : Store<AppState>) {}\r\n\r\n    intercept(request : HttpRequest<any>, next : HttpHandler) : Observable<HttpEvent<any>> {\r\n        return this.store.select('authenticatedUser').pipe(take(1), exhaustMap(\r\n            (authenticatedUser : AuthenticatedUser) =>{\r\n                if(!authenticatedUser.user.loggedIn) {\r\n                    return next.handle(request);\r\n                }\r\n                else {\r\n                    const modifiedReq = request.clone({\r\n                        setHeaders : {'Authorization' : 'Bearer ' + authenticatedUser.user.token}\r\n                    });\r\n                    return next.handle(modifiedReq);\r\n                }\r\n            }\r\n        ));\r\n    }\r\n}","//Parent class for all custom error handlers.\r\n/*\r\n * Handle errors: There are 3 types of errors in the application,\r\n *\r\n * (1) Server errors/ Client errors -> handled in error-interceptor(log for analysis, show full page error)\r\n * (2) Connection loss -> handled in connection-status-interceptor(display notification on bottom right, store/read from indexed db)\r\n * (3) User errors -> handled in individual component(display correct error to the user inside the individual component)\r\n*/\r\nexport class ErrorHandler {\r\n\r\n    customErrorMessage : String ='There was an error';\r\n    \r\n    handleError() : String {\r\n        return this.customErrorMessage;\r\n    };\r\n}","import { Component, OnInit, Input } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport * as UserPreferencesActions from '../../store/actions/user-preferences.actions';\r\nimport { Menu } from '../../store/reducers/menu.reducer';\r\nimport { DefaultMessages } from '../../../../shared/default-messages';\r\n\r\n@Component({\r\n  selector: 'app-meal-options',\r\n  templateUrl: './meal-options.component.html',\r\n  styleUrls: ['./meal-options.component.css']\r\n})\r\n/* This component performs 2 actions,\r\n * Display menu got from the backend\r\n * When the user selects a meal from the menu, dispatch an action\r\n */\r\nexport class MealOptionsComponent implements OnInit {\r\n\r\n  // Set inside meal-selector.html\r\n  @Input() indexOfMeal : number; \r\n\r\n  defaultText : String = DefaultMessages.menu.get(HttpRequestStatus.NO_ACTION);\r\n\r\n  // Menu received from the backend.\r\n  itemList : String[]; \r\n\r\n  //Meal selected by the user\r\n  itemSelected : String;\r\n  \r\n  constructor(private store:Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n\r\n    // Subscribe to store.menu to be notifed of changes in menu. Note that the menu is fetched from the backend.\r\n    this.store.select('menu').subscribe((menu : Menu) => {\r\n      \r\n      switch(menu.requestStatus) {\r\n        case HttpRequestStatus.NO_ACTION: {\r\n                                          this.resetItemList();                                          \r\n                                          this.defaultText = DefaultMessages.menu.get(HttpRequestStatus.NO_ACTION);                                          \r\n                                          break;\r\n                                          }\r\n        case HttpRequestStatus.REQUEST_SENT: {                                      \r\n                                          this.resetItemList();                                          \r\n                                          this.defaultText = DefaultMessages.menu.get(HttpRequestStatus.REQUEST_SENT);                                                                                 \r\n                                          break;\r\n                                          }\r\n        case HttpRequestStatus.RESPONSE_RECEIVED: {\r\n                                          this.defaultText = DefaultMessages.menu.get(HttpRequestStatus.RESPONSE_RECEIVED);\r\n                                          this.resetItemList();\r\n                                          // Only one of the 2 values can be truthy - menu.itemList | menu.error\r\n                                          // If menu.itemList if truthy, display item list to the user\r\n                                          if(menu.itemList) { \r\n                                            this.itemList = menu.itemList.slice();\r\n                                          }\r\n                                          //If menu.error is true, display the error\r\n                                          if(menu.error) { this.itemList = [menu.error]; }                                          \r\n                                          \r\n                                          break;\r\n                                          }                                                                   \r\n      }\r\n    });\r\n  }\r\n  /* If a meal is selected by the user from the dropdown, save it to store.userPreferences by dispatching an action. \r\n   *\r\n   */\r\n  onMealSelected(item : String) : void {\r\n    this.itemSelected = item;\r\n    this.store.dispatch(\r\n      new UserPreferencesActions.UpdateMeal({\r\n        itemPosition: this.indexOfMeal, \r\n        itemName: this.itemSelected\r\n      }));\r\n  }\r\n\r\n  private resetItemList() {\r\n    this.itemList = new Array<String>();\r\n  }\r\n}","    <div class=\"dropdown\">\r\n    <button class=\"btn btn-secondary dropdown-toggle text-wrap w-100 px-0 mx-0 btn-block\" \r\n            type=\"button\" \r\n            id=\"dropdownMeal\" \r\n            data-toggle=\"dropdown\" \r\n            aria-haspopup=\"true\" \r\n            aria-expanded=\"false\">\r\n        <span class=\"p-0 m-0\">{{ (itemSelected === undefined) ? defaultText:itemSelected }}</span>\r\n    </button>\r\n    <div class=\"dropdown-menu\" \r\n         aria-labelledby=\"dropdownMeal\">\r\n      <div *ngFor=\"let item of itemList\">\r\n          <button class=\"dropdown-item text-wrap w-100 btn-block\" \r\n                  [value]=\"item\" \r\n                  (click)=\"onMealSelected(item)\">\r\n          <span>{{ item }} </span>\r\n          </button>\r\n      </div>\r\n    </div>\r\n  </div>","import { Component, OnInit, Input, OnDestroy } from '@angular/core';\r\nimport { Recipe } from 'src/app/shared/model/recipe.model';\r\n\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport * as UserDisplayPreferencesActions from '../../../../user-mgmt/store/actions/user-display-preferences.actions';\r\n\r\n@Component({\r\n  selector: 'app-recipe-item',\r\n  templateUrl: './recipe-item.component.html',\r\n  styleUrls: ['./recipe-item.component.css']\r\n})\r\nexport class RecipeItemComponent implements OnInit, OnDestroy {\r\n\r\n  //Recipe and index are set from RecipeList.\r\n  @Input() recipe : Recipe;\r\n\r\n  @Input() indexOfRecipe: number;\r\n\r\n  constructor(private store : Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onItemSelect() : void {\r\n    this.store.dispatch(new UserDisplayPreferencesActions.ShowRecipeDetail({ id: this.indexOfRecipe, name : this.recipe.name}));\r\n  }\r\n\r\n  ngOnDestroy() : void { }\r\n}","<button class=\"list-group-item clearfix w-100 h-100\" (click) = \"onItemSelect()\">\r\n        <p class=\"list-group-item-heading custom-font\">{{recipe.name}}</p>\r\n        <p class=\"list-group-item-text custom-item-display\">{{recipe.description}}</p>\r\n        <div class=\"custom-item-display\">\r\n            <img src=\"{{recipe.imageUrl}}\" alt=\"{{recipe.name}}\" class=\"img-responsive\" style=\"max-height : 50px;\">\r\n        </div> \r\n        <div class=\"custom-item-display\">   \r\n            <a href=\"{{recipe.tutorialPath}}\"> Watch the tutorial here </a>\r\n        </div>    \r\n</button>","import { HttpRequestStatus } from './http-request-status.enum';\r\n\r\n//Setup default messages for Fetch-Menu\r\nconst defaultMessagesMenu = new Map<HttpRequestStatus, String>();\r\ndefaultMessagesMenu.set(HttpRequestStatus.NO_ACTION, 'Please select diet');\r\ndefaultMessagesMenu.set(HttpRequestStatus.REQUEST_SENT, 'Fetching menu');\r\ndefaultMessagesMenu.set(HttpRequestStatus.RESPONSE_RECEIVED, 'Please select a meal');\r\n\r\n//Setup default messages for Get-OptimizedMealPlans\r\nconst defaultMessagesMealPlan = new Map<HttpRequestStatus, String>();\r\ndefaultMessagesMealPlan.set(HttpRequestStatus.NO_ACTION, 'Please select meals. Meal plan will be displayed here.');\r\ndefaultMessagesMealPlan.set(HttpRequestStatus.REQUEST_SENT, 'Fetching meal plan');\r\ndefaultMessagesMealPlan.set(HttpRequestStatus.RESPONSE_RECEIVED, ''); //No message will be displayed, instead the actual optimized meal plan will be displayed\r\n\r\n//Setup default messages for Fetch-Recipe\r\nconst defaultMessagesRecipe = new Map<HttpRequestStatus, String>();\r\ndefaultMessagesRecipe.set(HttpRequestStatus.NO_ACTION, 'Select a meal plan to view recipes');\r\ndefaultMessagesRecipe.set(HttpRequestStatus.REQUEST_SENT, 'Fetching recipe');\r\ndefaultMessagesRecipe.set(HttpRequestStatus.RESPONSE_RECEIVED, ''); //No message will be displayed, instead the actual recipe will be displayed\r\n\r\n//Setup default messages for User-login\r\nconst defaultMessagesLogin = new Map<HttpRequestStatus, String>();\r\ndefaultMessagesLogin.set(HttpRequestStatus.NO_ACTION, ''); //Login page is self explanatory, we need not display help-text \r\ndefaultMessagesLogin.set(HttpRequestStatus.REQUEST_SENT, 'Login in progress');\r\ndefaultMessagesLogin.set(HttpRequestStatus.RESPONSE_RECEIVED, ''); //No message will be displayed, instead the user will be redirected to meal-optimizer/meal-planner page\r\n\r\n//Setup default messages for User-registation\r\nconst defaultMessagesRegister = new Map<HttpRequestStatus, String>();\r\ndefaultMessagesRegister.set(HttpRequestStatus.NO_ACTION, ''); //Registration page is self explanatory, we need not display help-text\r\ndefaultMessagesRegister.set(HttpRequestStatus.REQUEST_SENT, 'Registration in progress');\r\ndefaultMessagesRegister.set(HttpRequestStatus.RESPONSE_RECEIVED, ''); //No message will be displayed, instead the user will be redirected to meal-optimizer/meal-planner page\r\n\r\nexport const DefaultMessages = { \r\n                                menu: defaultMessagesMenu, \r\n                                mealPlan: defaultMessagesMealPlan, \r\n                                recipe : defaultMessagesRecipe,\r\n                                login : defaultMessagesLogin,\r\n                                register : defaultMessagesRegister\r\n                                };","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\n\r\nimport { IUserDietType } from '../user-diet-type-resolver.service';\r\n\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class UserDietService {\r\n\r\n    constructor(private http : HttpClient) {}\r\n\r\n    getDietTypes() {\r\n        return this.http.get<{ categoryName : String, displayValue : String }[]>(\r\n            `${environment.hostUrl}/${environment.applicationName}/categories/fetchAll`\r\n        ).pipe(\r\n            map(responseData => {\r\n            const userDietTypes = new Array<IUserDietType>();\r\n            responseData.forEach(category => {\r\n                userDietTypes.push({dietType: category.categoryName, displayValue: category.displayValue});\r\n            });\r\n            return userDietTypes;\r\n        }));\r\n    }\r\n}","import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\n\r\nimport { ConnectionStatusInterceptor } from './connection-status-interceptor.service';\r\nimport { AuthInterceptor } from './auth-interceptor.service';\r\nimport { ErrorInterceptor } from './error-interceptor.service';\r\n\r\nexport const interceptorProviders = \r\n   [\r\n    { provide : HTTP_INTERCEPTORS, useClass : ConnectionStatusInterceptor, multi : true},\r\n    { provide : HTTP_INTERCEPTORS, useClass : AuthInterceptor, multi : true},\r\n    { provide : HTTP_INTERCEPTORS, useClass : ErrorInterceptor, multi : true}\r\n   ];","import { NgModule } from '@angular/core';\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\n\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CalendarModule, DateAdapter } from 'angular-calendar';\r\nimport { adapterFactory } from 'angular-calendar/date-adapters/date-fns';\r\n\r\nimport { MealPlannerRoutingModule } from '../meal-planner/meal-planner.routing.module';\r\nimport { MealOptimizerComponent } from './meal-optimizer/meal-optimizer.component';\r\nimport { DeliveryDateSelectorComponent } from './meal-optimizer/delivery-date-selector/delivery-date-selector.component';\r\nimport { MealSelectorComponent } from './meal-optimizer/meal-selector/meal-selector.component';\r\nimport { ManageMealPlanComponent } from './meal-optimizer/meal-selector/manage-meal-plan/manage-meal-plan.component';\r\nimport { MealOptionsComponent } from './meal-optimizer/meal-selector/meal-options/meal-options.component';\r\nimport { OptimizedMealPlanComponent } from './meal-optimizer/optimized-meal-plan/optimized-meal-plan.component';\r\nimport { OptimizedResultsTableComponent } from './meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-results-table.component';\r\nimport { OptimizedResultCostComponent } from './meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-cost/optimized-result-cost.component';\r\nimport { OptimizedResultQualityComponent } from './meal-optimizer/optimized-meal-plan/optimized-results-table/optimized-result-quality/optimized-result-quality.component';\r\nimport { OrderInfoComponent } from './meal-optimizer/optimized-meal-plan/optimized-results-table/order-info/order-info.component';\r\nimport { UserDietTypeComponent } from './meal-optimizer/user_diet_type/user_diet_type.component';\r\nimport { RecipeDetailComponent } from '../meal-planner/recipes/recipe-detail/recipe-detail.component';\r\nimport { RecipesComponent } from '../meal-planner/recipes/recipes.component';\r\nimport { RecipeListComponent } from '../meal-planner/recipes/recipe-list/recipe-list.component';\r\nimport { RecipeItemComponent } from '../meal-planner/recipes/recipe-list/recipe-item/recipe-item.component';\r\nimport { RecipeStartComponent } from '../meal-planner/recipes/recipe-start/recipe-start.component';\r\nimport { ShoppingListComponent } from '../meal-planner/shopping-list/shopping-list.component';\r\nimport { ShoppingEditComponent } from '../meal-planner/shopping-list/shopping-edit/shopping-edit.component';\r\nimport { OnlineOrderComponent } from './meal-optimizer/online-order/online-order.component';\r\nimport { MealPlannerComponent } from './meal-planner.component';\r\nimport { CoreModule } from '../shared/core/core.module';\r\n\r\n@NgModule({\r\n    declarations : [\r\n        MealPlannerComponent,\r\n        DeliveryDateSelectorComponent,\r\n        MealSelectorComponent,\r\n        ManageMealPlanComponent,\r\n        MealOptionsComponent,\r\n        OptimizedMealPlanComponent,\r\n        OptimizedResultsTableComponent,\r\n        OptimizedResultCostComponent,\r\n        OptimizedResultQualityComponent,\r\n        OrderInfoComponent,\r\n        UserDietTypeComponent,\r\n        MealOptimizerComponent,\r\n        RecipesComponent,\r\n        RecipeDetailComponent,\r\n        RecipeListComponent,\r\n        RecipeItemComponent,\r\n        RecipeStartComponent,\r\n        ShoppingListComponent,\r\n        ShoppingEditComponent,\r\n        OnlineOrderComponent\r\n    ],\r\n    imports : [\r\n        CoreModule,\r\n        MealPlannerRoutingModule,\r\n        BrowserAnimationsModule,\r\n        MatDatepickerModule,\r\n        MatNativeDateModule,        \r\n        CalendarModule.forRoot({\r\n          provide: DateAdapter,\r\n          useFactory: adapterFactory,\r\n        })\r\n    ],\r\n    providers : [ DatePipe ]\r\n})\r\nexport class MealPlannerModule {}","import { Injectable } from \"@angular/core\";\r\nimport { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\n\r\nimport { DisplayService } from \"./display.service\";\r\nimport { ComponentPortal } from \"@angular/cdk/portal\";\r\nimport { CustomNotificationComponent } from '../core/custom-notification/custom-notification.component';\r\n\r\n@Injectable({ providedIn : 'root' })\r\nexport class NotificationDisplayService extends DisplayService {\r\n    \r\n    //OverlayRef is the container created dynamically. Store a list of all containers created dynamically for tracking.\r\n    private notificationReferences : Array<OverlayRef> = new Array<OverlayRef>();\r\n\r\n    constructor(private overlay : Overlay) {\r\n        super();\r\n    }\r\n\r\n    public showNotification(content : String) {\r\n        //Create container dynamically.\r\n        let notificationRef : OverlayRef = this.overlay.create(this.getNotificationConfig());\r\n        //Add to list of containers.\r\n        this.notificationReferences.push(notificationRef);\r\n        //Create component dynamically.\r\n        const componentPortal = new ComponentPortal(CustomNotificationComponent, \r\n                                                    null, \r\n                                                    this.createInjector(content));\r\n        //Attach component to container\r\n        notificationRef.attach(componentPortal);\r\n        //Auto hide notification after 20 secs.\r\n        setTimeout(this.hideNotification.bind(this), 20000);       \r\n      }\r\n\r\n      public hideNotification() {\r\n        //If atleast 1 container is created.\r\n        if(this.notificationReferences.length > 0) {\r\n          //Get a reference to the earliest/first container created (and remove it from the list).\r\n          let notificationRef : OverlayRef = this.notificationReferences.shift();\r\n          if(!!notificationRef) {\r\n            //Clear the container.\r\n            notificationRef.detach();\r\n          }\r\n        }\r\n      }\r\n\r\n      private getNotificationConfig() : OverlayConfig {\r\n        //Set position of notification.\r\n        const positionStrategy = this.overlay.position()\r\n                                             .global()\r\n                                             .bottom()\r\n                                             .right();\r\n  \r\n        //Return object holding all the config properties.\r\n        const notificationConfig = new OverlayConfig({\r\n          scrollStrategy: this.overlay.scrollStrategies.noop(),\r\n          positionStrategy\r\n        });\r\n  \r\n        return notificationConfig;\r\n      }\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-app-info',\r\n  templateUrl: './app-info.component.html',\r\n  styleUrls: ['./app-info.component.css']\r\n})\r\nexport class AppInfoComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { AuthenticationResponseHandler } from '../../shared/services/response-handler/authentication-response-handler';\r\nimport { User } from 'src/app/shared/model/user.model';\r\nimport { UserService } from 'src/app/shared/services/user.service';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\n\r\n@Component({\r\n  selector: 'app-user-redirect',\r\n  templateUrl: './user-redirect.component.html',\r\n  styleUrls: ['./user-redirect.component.css']\r\n})\r\nexport class UserRedirectComponent implements OnInit {\r\n\r\n  authenticatedUser : User;\r\n\r\n  constructor( \r\n    private authenticationResponseHandler : AuthenticationResponseHandler,\r\n    private userService : UserService,\r\n    private store : Store<AppState>,\r\n    private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    \r\n        //This page is loaded only when user authentication on Keycloak is successful. Hence log the username + token\r\n        this.userService.parseAuthenticatedUserDetails()\r\n        .then((authenticatedUser) => this.authenticationResponseHandler.handleSuccess(authenticatedUser))\r\n        .catch((error) => this.authenticationResponseHandler.handleFailure(error));\r\n  \r\n        this.store.select('authenticatedUser').subscribe(( authenticatedUser : AuthenticatedUser ) => {\r\n          this.authenticatedUser = authenticatedUser.user;\r\n        });\r\n        \r\n        setTimeout(()=>{\r\n          this.router.navigateByUrl('/meal-planner');\r\n        },1000);\r\n  }\r\n}","<h4 class=\"justify-content-start my-4 ml-1\">Redirecting to meal planner ...</h4>\r\n<div class=\"mt-1 ml-1 border col-md-10 col-xs-12\">\r\n    <div class=\"m-3\">\r\n        <p>You have logged in as</p>\r\n        <table class=\"table table-borderless table-hover table-responsive mt-4\">\r\n            <tbody>\r\n                <tr>\r\n                  <td class=\"font-weight-bold\">Username</td>\r\n                  <td>{{ authenticatedUser.username }}</td>  \r\n                </tr>\r\n                <tr>\r\n                  <td class=\"font-weight-bold\">Login status</td>\r\n                  <td>{{ (authenticatedUser.loggedIn)?'logged in':'not logged in' }}</td>  \r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n</div>","import {\r\n    Component,\r\n    ElementRef,\r\n    OnInit,\r\n    ViewChild\r\n  } from '@angular/core';\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport { Calendar } from \"@fullcalendar/core\";\r\n\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { Store } from '@ngrx/store';\r\nimport * as UserPreferencesActions from '../store/actions/user-preferences.actions';\r\n\r\n  @Component({\r\n    selector: 'app-delivery-date-selector',\r\n    styleUrls: ['delivery-date-selector.component.css'],\r\n    templateUrl: './delivery-date-selector.component.html'\r\n  })\r\n  // This component performs only 1 action - save delivery date chosen to store.\r\n  export class DeliveryDateSelectorComponent implements OnInit {\r\n\r\n    @ViewChild('calendar') cal : ElementRef;\r\n    calendar: Calendar;\r\n\r\n    propertyName = 'deliveryDate';\r\n\r\n    constructor(private store : Store<AppState>) { }\r\n   \r\n    ngOnInit() { }\r\n\r\n    handleDateClick(arg) {\r\n      this.store.dispatch(new UserPreferencesActions.EditDeliveryDate(arg.date));\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n      this.calendar = new Calendar(this.cal.nativeElement, {\r\n        plugins: [dayGridPlugin, interactionPlugin],\r\n        validRange: {\r\n          start: new Date(),\r\n          end: new Date().setMonth(new Date().getMonth() + 6)\r\n        },\r\n        aspectRatio: 2.4,\r\n        fixedWeekCount: false,\r\n        dateClick: this.handleDateClick.bind(this)\r\n      });\r\n\r\n      this.calendar.render();\r\n    }\r\n  }","<h4 class=\"justify-content-start py-4\">Step 2: Select date of delivery</h4>\r\n  <div class=\"custom-cal-width ml-4\">   \r\n    <div id=\"calendar\" #calendar></div>\r\n  </div>","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { OrderService } from 'src/app/shared/services/order.service';\r\nimport { User } from 'src/app/shared/model/user.model';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { UserPreferences } from '../../store/reducers/user-preferences.reducer';\r\nimport { AuthenticatedUser } from 'src/app/user-mgmt/store/reducers/user-mgmt.reducer';\r\nimport { OptimizedMealPlans } from '../../store/reducers/order.reducer';\r\nimport { OrderResponse } from 'src/app/shared/model/order-response.model';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\nimport { OptimizationMode } from 'src/app/shared/optimization-mode.enum';\r\nimport { UserDisplayPreferences } from 'src/app/user-mgmt/store/reducers/user-display-preferences.reducer';\r\n\r\nimport * as OrderActions from '../../store/actions/order.actions';\r\nimport * as UserDisplayPreferencesActions from '../../../../user-mgmt/store/actions/user-display-preferences.actions';\r\nimport * as RecipeActions from '../../../recipes/store/actions/recipes.actions';\r\n\r\n@Component({\r\n  selector: 'app-manage-meal-plan',\r\n  templateUrl: './manage-meal-plan.component.html',\r\n  styleUrls: ['./manage-meal-plan.component.css']\r\n})\r\n/* This component performs 3 actions\r\n * Get mode from the url : This decide whether the backend call must be a CREATE (POST) or an UPDATE (PUT)\r\n * Get values of user prefs and authenticated user from the store and create the meal plan request\r\n * Call backend by dispatching the action CREATE_ORDER_START\r\n */\r\nexport class ManageMealPlanComponent implements OnInit, OnDestroy {\r\n\r\n  /* Enable or disable the 'Get Meal Plan' button based 2 conditions. Enable button if:\r\n   * User inputs are valid and\r\n   * The meals selected do not satisfy daily nutrition requirements - allow the user to edit meals selected\r\n   * Initially disableGetMealPlan is set to true (because user inputs are invalid at this point)\r\n   */\r\n  disableGetOrUpdateMealPlan : boolean = true;\r\n\r\n  //This value is truthy if a valid meal plan is generated atleast once. \r\n  //We need the ID of the generated meal plan for further updates.\r\n  savedMealPlans : OrderResponse;\r\n  \r\n  //Read the user inputs from store to generate a meal plan request\r\n  userPrefs : UserPreferences;\r\n\r\n  //Read the authenticatedUser info from store to include user ID in the meal plan request\r\n  authenticatedUser : User;\r\n\r\n  //Mode toggles between get and update to either generate meal plan for the first time \r\n  //or to update an existing meal plan.\r\n  mode : String;\r\n\r\n  constructor(private store : Store<AppState>, \r\n              private orderService : OrderService) { }\r\n\r\n  ngOnInit(): void {\r\n        // Get value of mode (create or edit)\r\n        this.store.select('userDisplayPreferences').subscribe((userDisplayPreferences : UserDisplayPreferences) => {\r\n          this.mode = userDisplayPreferences.optimizationMode;\r\n        });\r\n\r\n        this.store.select('userPreferences').subscribe((userPrefs : UserPreferences) => {\r\n          this.userPrefs = userPrefs;\r\n          //Enable get meal plan when 4 meals are selected.\r\n          this.disableGetOrUpdateMealPlan = (userPrefs.mealSelected.filter(\r\n                                                            (meal) => meal !== undefined ).length) !== 4;\r\n          });\r\n\r\n        this.store.select('authenticatedUser').subscribe((authenticatedUser : AuthenticatedUser) => {\r\n          this.authenticatedUser = authenticatedUser.user;\r\n        });\r\n        \r\n        this.store.select('optimizedPlans').subscribe((optimizedMealPlans : OptimizedMealPlans) => {\r\n          \r\n          //Response received from backend. The user can choose to edit meals selected, so enable get meal plan.\r\n          if(optimizedMealPlans.requestStatus === HttpRequestStatus.RESPONSE_RECEIVED) {\r\n            this.disableGetOrUpdateMealPlan = false;\r\n\r\n            //Switch to 'update' mode if there is no error and optimization result state is DISTINCT OR OPTIMAL OR FEASIBLE\r\n            if(!optimizedMealPlans.error && \r\n              (optimizedMealPlans.mealPlans && \r\n                (optimizedMealPlans.mealPlans.optimizationState === \"DISTINCT\" || optimizedMealPlans.mealPlans.optimizationState === \"OPTIMAL\" || optimizedMealPlans.mealPlans.optimizationState === \"FEASIBLE\"))) {\r\n                  this.savedMealPlans = optimizedMealPlans.mealPlans;\r\n                  this.store.dispatch(new UserDisplayPreferencesActions.UpdateOptimizationMode(OptimizationMode.UPDATE));\r\n            }\r\n            else { \r\n              this.savedMealPlans = null;\r\n            }\r\n          }\r\n          \r\n        });\r\n  }\r\n\r\n  onGetMealPlan() {\r\n    //Clear existing meal plans\r\n    this.store.dispatch(new OrderActions.ClearOrder());\r\n    if(this.orderService.verifyAllInputsAreReceived()) {\r\n      //If all inputs are received, create the order\r\n      let orderRequest = this.orderService.createOrderRequest(this.userPrefs.deliveryDate, this.userPrefs.mealSelected, this.authenticatedUser);    \r\n      this.fetchMealPlan(orderRequest);\r\n    }\r\n    else alert('One of the required inputs is missing');\r\n  }\r\n\r\n  onUpdateMealPlan() {\r\n    /* We do not check if this.savedMealPlans !=null since this point is reached \r\n     * only if the order has been saved atleast once, \r\n     * if the order has never been saved, the optimizer is in create mode. \r\n     */  \r\n    //Hide recipes section\r\n    this.store.dispatch(new UserDisplayPreferencesActions.HideRecipes());\r\n    this.store.dispatch(new RecipeActions.ClearRecipes());\r\n    //Clear existing meal plans\r\n    this.store.dispatch(new OrderActions.ClearOrder());\r\n    if(this.orderService.verifyAllInputsAreReceived()) {\r\n      //If all inputs are received, create the order\r\n      let orderRequest = this.orderService.createOrderRequest(this.userPrefs.deliveryDate, this.userPrefs.mealSelected, this.authenticatedUser, this.savedMealPlans.orderId);    \r\n      this.fetchMealPlan(orderRequest);\r\n      }\r\n    else alert('One of the required inputs is missing');\r\n    }\r\n\r\n  private fetchMealPlan(orderRequest) : void {\r\n      //Call backend to get a meal plan\r\n      this.store.dispatch(new OrderActions.UpdateRequestStatus(HttpRequestStatus.REQUEST_SENT));\r\n      this.store.dispatch(new OrderActions.SaveOrderStart(orderRequest));\r\n      this.disableGetOrUpdateMealPlan = true;\r\n  }\r\n\r\n  ngOnDestroy() : void {}\r\n}","        <button type=\"button\" \r\n                class=\"btn btn-dark\" \r\n                *ngIf=\"mode === 'create'\" \r\n                (click)=\"onGetMealPlan()\" \r\n                [disabled]='disableGetMealPlan'>Get Meal Plan</button>\r\n        <button type=\"button\" \r\n                class=\"btn btn-dark\" \r\n                *ngIf=\"mode === 'update'\" \r\n                (click)=\"onUpdateMealPlan()\">Update Meal Plan</button>","import { Injectable, OnDestroy, OnInit } from '@angular/core';\r\nimport { Recipe } from '../model/recipe.model';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport { Store } from '@ngrx/store';\r\nimport { Recipes } from 'src/app/meal-planner/recipes/store/reducers/recipes.reducer';\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class RecipeService implements OnInit, OnDestroy {\r\n  \r\n  constructor(private store : Store<AppState>) {\r\n    this.store.select('recipes').subscribe((recipes : Recipes) => {\r\n      this.recipes = recipes.recipes;\r\n    });\r\n  }\r\n\r\n  ngOnInit() { }\r\n  \r\n  recipes: Recipe[] = [];\r\n\r\n    public getRecipeById(id : number) : Recipe {\r\n      var recipeList = this.recipes.slice();\r\n      return recipeList[id];\r\n    }\r\n\r\n  ngOnDestroy() {}\r\n}","import { NgModule } from \"@angular/core\";\r\nimport { RouterModule, Routes } from \"@angular/router\";\r\nimport { ContactUsComponent } from \"./contact-us/contact-us.component\";\r\nimport { HomeComponent } from \"./home/home.component\";\r\n\r\nconst appInfoRoutes : Routes = [\r\n    {path:'app-info', children: [\r\n        { path:'home', component: HomeComponent },\r\n        { path:'contact-us', component: ContactUsComponent }\r\n    ]}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(appInfoRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppInfoRoutingModule {}","import { Observable } from 'rxjs';\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { ConnectionStatusHandlerService } from './connection-status-handler.service';\r\n\r\n//Can also be renamed canDeactivateGuard\r\nexport interface CanComponentDeactivate {\r\n    canDeactivate() : Observable<boolean> | Promise<boolean> | boolean;\r\n}\r\n\r\n@Injectable({providedIn:'root'})\r\nexport class CanExitPageService implements CanDeactivate<CanComponentDeactivate> {\r\n\r\n    constructor(private connectionStatusHandlerService:  ConnectionStatusHandlerService) {}\r\n    \r\n    canDeactivate(component: CanComponentDeactivate , currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot) : Observable<boolean> | Promise<boolean> | boolean {\r\n        return (this.connectionStatusHandlerService.getConnectionStatus())?component.canDeactivate():true;\r\n    }\r\n}","import { Routes } from '@angular/router';\r\nimport { RouterModule } from '@angular/router';\r\nimport { NgModule } from '@angular/core';\r\nimport { ErrorPageComponent } from '../app/shared/core/error-page/error-page.component';\r\n\r\nconst appRoutes : Routes = [\r\n    {path: '', redirectTo:'/app-info/home', pathMatch: 'full'},\r\n    {path: 'error', component: ErrorPageComponent, data: {errorMessage: 'oops, something went wrong! Let us try again ...'}},\r\n    {path: '**', redirectTo: '/error'}\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forRoot(appRoutes, { useHash: true })],\r\n    exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule {}","export enum ShoppingListMode {\r\n    ADD = 'add',\r\n    UPDATE = 'update'\r\n}","import { Component, OnInit, Input } from '@angular/core'\r\nimport { Store } from '@ngrx/store';\r\n\r\nimport { IUserDietType } from '../../../shared/services/user-diet-type-resolver.service';\r\nimport { AppState } from 'src/app/store/reducers/app.reducer';\r\nimport * as UserPreferenceActions from '../store/actions/user-preferences.actions';\r\nimport * as MenuActions from '../store/actions/menu.actions';\r\nimport { HttpRequestStatus } from 'src/app/shared/http-request-status.enum';\r\n\r\n@Component({\r\n    selector: 'app-user-diet-type',\r\n    styleUrls: ['user_diet_type.component.css'],\r\n    templateUrl: './user_diet_type.component.html' \r\n})\r\n// This class displays the list of diet types and allows the user to choose a diet type.\r\nexport class UserDietTypeComponent implements OnInit {\r\n    \r\n    propertyName: String = 'dietType';\r\n\r\n    constructor(private store : Store<AppState>) { }\r\n\r\n    @Input() dietTypes : Array<IUserDietType>;\r\n\r\n    // When the user selects a diet type, dispatch an action to fetch menu (also update menu.requestStatus).\r\n    onDietTypeSelect(dietType : String) {\r\n        this.store.dispatch(new MenuActions.UpdateRequestStatus(HttpRequestStatus.REQUEST_SENT));\r\n        this.store.dispatch(new UserPreferenceActions.EditDietType(dietType));\r\n    }\r\n\r\n    ngOnInit(): void { }\r\n}","<h4 class=\"justify-content-start py-4\">Step 1: Select diet type</h4>\r\n<div class=\"custom-top-margin\">\r\n        <div *ngFor=\"let dietType of dietTypes\" class=\"form-check ml-4 my-2\">\r\n                <input type=\"radio\"\r\n                       class=\"form-check-input\" \r\n                       [id]='dietType.dietType' \r\n                       [(ngModel)]=\"userDietType\" \r\n                       name=\"user_diet_type\" \r\n                       [value]=\"dietType.dietType\" \r\n                       (click)=\"onDietTypeSelect(dietType.dietType)\">\r\n                <label class=\"form-check-label\" for=\"dietType.dietType\">       \r\n                {{dietType.displayValue}}\r\n                </label>\r\n        </div>\r\n</div>                ","import { Overlay, OverlayConfig, OverlayRef } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { CustomOverlayComponent } from '../core/custom-overlay/custom-overlay.component'; \r\nimport { DisplayService } from './display.service';\r\n\r\n@Injectable({ providedIn:'root' })\r\nexport class OverlayDisplayService extends DisplayService {\r\n\r\n    private overlayRef : OverlayRef;\r\n    \r\n    constructor(private overlay : Overlay) {\r\n      super();\r\n    }\r\n\r\n    public showOverlay(message : String) {\r\n        //Create container\r\n        this.overlayRef = this.overlay.create(this.getOverlayConfig());\r\n        //Create component\r\n        const componentPortal = new ComponentPortal(CustomOverlayComponent, \r\n                                                    null, \r\n                                                    super.createInjector(message));\r\n        //Attach component to container.\r\n        this.overlayRef.attach(componentPortal); \r\n    }\r\n\r\n    //Function to hide overlay.\r\n    public hideOverlay() {\r\n      if(!!this.overlayRef) {\r\n          this.overlayRef.detach();\r\n        }\r\n      }\r\n\r\n    private getOverlayConfig() : OverlayConfig {\r\n      //Center the overlay.\r\n      const positionStrategy = this.overlay.position()\r\n                              .global()\r\n                              .centerHorizontally()\r\n                              .centerVertically();\r\n      //Return object with all the config properties.\r\n      const overlayConfig = new OverlayConfig({\r\n        scrollStrategy: this.overlay.scrollStrategies.block(),\r\n        positionStrategy\r\n      });\r\n\r\n      return overlayConfig;\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\r\nimport { Recipe } from 'src/app/shared/model/recipe.model';\r\nimport { Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-recipe-list',\r\n  templateUrl: './recipe-list.component.html',\r\n  styleUrls: ['./recipe-list.component.css']\r\n})\r\n/*\r\n * This component is loaded for the route meal-planner/recipes.\r\n * It is composed of 4 RecipeItems.\r\n * \r\n * Tasks : Takes recipes from 'Recipes' store and passes them to RecipeItem.\r\n * Technique used : Attribute Binding \r\n */\r\nexport class RecipeListComponent implements OnInit {\r\n\r\n  @Input() recipes: Recipe[];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n}","<div class=\"row\">\r\n    <div class=\"col-12 custom-item-layout\">\r\n            <app-recipe-item class=\"flex-fill\" *ngFor = \"let recipeEl of recipes; index as indexOfRecipe\" [recipe]=\"recipeEl\" [indexOfRecipe]=\"indexOfRecipe\"></app-recipe-item>\r\n    </div>\r\n</div>","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","export enum HttpRequestStatus {\r\n    NO_ACTION = 'NO ACTION', \r\n    REQUEST_SENT = 'REQUEST SENT', \r\n    RESPONSE_RECEIVED = \"RESPONSE RECEIVED\"\r\n}","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}